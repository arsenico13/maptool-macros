<net.rptools.maptool.model.MacroButtonProperties>
  <macroUUID>a8f63000-923a-47e1-94a9-bcbe942fe3d8</macroUUID>
  <saveLocation>Token</saveLocation>
  <index>1</index>
  <colorKey>red</colorKey>
  <hotKey>None</hotKey>
  <command>&lt;!-- Constants for a little initial help --&gt;
[h: ATK_BONUS = 10]
[h: DMG_BONUS = 8]
[h: RAGE_BONUS = 3]
[h: DMG_DIE = "6"]

&lt;!-- fetch values from properties --&gt;
[h: isRage = getProperty("isRaging")]
[h,if (isPropertyEmpty("attackBonus")): attackBonus = ATK_BONUS; attackBonus = getProperty("attackBonus")]
[h,if (isPropertyEmpty("dmgNumDice")): dmgNumDice = 1; dmgNumDice = getProperty("dmgNumDice")]
[h,if (isPropertyEmpty("dmgDie")): dmgDie = DMG_DIE; dmgDie = getProperty("dmgDie")]
[h,if (isPropertyEmpty("dmgBonus")): dmgBonus = DMG_BONUS; dmgBonus = getProperty("dmgBonus")]
[h,if (isPropertyEmpty("rageBonus")): rageBonus = RAGE_BONUS; rageBonus = getProperty("rageBonus")]
[h,if (isPropertyEmpty("critBonus")): critBonus = 1; critBonus = getProperty("critBonus")]
[h,if (isPropertyEmpty("isBlessed")): isBlessed = 0; isBlessed = getProperty("isBlessed")]
[h,if (isPropertyEmpty("blessBonus")): blessBonus=4; blessBonus = getProperty("blessBonus")]

&lt;!-- Prompt user --&gt;
[h: abort(input("attackBonus|" + attackBonus + "|Attack bonus|text",
    "dmgNumDice|" + dmgNumDice + "|Number of Damage Dice|text",
    "dmgDie|" + dmgDie + "|Damage Die|text",
    "dmgBonus|" + dmgBonus + "|Damage bonus|text",
    "critBonus|" + critBonus + "|Number of extra crit dice|text",
    "rageBonus|" + rageBonus + "|Rage bonus|text",
	"isRage|" + isRage + "|Raging|check",
	"blessBonus|" + blessBonus + "|Bless Bonus Die|text",
	"isBlessed|" + isBlessed + "|Blessed|check",
	"advantageDisadvantage|None,Advantage,Disadvantage|Advantage/Disadvantage|list|value=string",
	"damageType|Bludgeoning,Piercing,Slashing|Damage Type|list|value=string"))]

&lt;!-- Preserve the interesting choices so they default for the next prompt --&gt;
[h: setProperty("isRaging", isRage)]
[h: setProperty("attackBonus", attackBonus)]
[h: setProperty("dmgBonus", dmgBonus)]
[h: setProperty("rageBonus", rageBonus)]
[h: setProperty("dmgNumDice", dmgNumDice)]
[h: setProperty("dmgDie", dmgDie)]
[h: setProperty("critBonus", critBonus)]
[h: setProperty("isBlessed", isBlessed)]
[h: setProperty("blessBonus", blessBonus)]
[h: setProperty("damageType", damageType)]

&lt;!-- Roll attack dice (always roll two, determine if advantage or disadvantage applies after --&gt;
[h: attack = 1d20]
[h: attack2 = 1d20]

&lt;!-- Roll damage, apply rage --&gt;

[h,if(isRage &gt; 0): dmgBonus = dmgBonus + rageBonus]

&lt;!-- Roll Blessed, apply to total bonus --&gt;

[h,if(isBlessed &gt; 0): blessAttackBonus = roll( 1, blessBonus )]

&lt;!-- Calculate the correct dmg roll --&gt;
[h: realAttack = attack]
[h,if (advantageDisadvantage == "Advantage"): realAttack = max(attack, attack2)]
[h,if (advantageDisadvantage == "Disadvantage"): realAttack = min(attack, attack2)]

&lt;!-- Apply critical --&gt;
[h,if (realAttack == 20): dmgNumDice = dmgNumDice + critBonus]
&lt;!-- Roll damage --&gt;
[h: dmg = roll(dmgNumDice,dmgDie) + dmgBonus]
&lt;!-- Build the message --&gt;
[h: atkString = "&lt;b&gt;"]
[h: atk2String = "&lt;b&gt;"]
[h,if(attack == 20): atkString = atkString + "&lt;font color='red'&gt;&lt;i&gt;CRITICAL&lt;/i&gt;&lt;/font&gt; "]
[h,if(attack2 == 20): atk2String = atk2String + "&lt;font color='red'&gt;&lt;i&gt;CRITICAL&lt;/i&gt;&lt;/font&gt; "]
[h: attack = attack + attackBonus]
[h: attack2 = attack2 + attackBonus]
[h,if(isBlessed &gt; 0),CODE:
{
	[h:attack = attack + blessAttackBonus]
	[h:atkString = atkString + "&lt;font color='green'&gt;Blessed &lt;&lt;d"+blessBonus+"="+blessAttackBonus+"&lt;/font&gt; "]
	[h:atk2String = atk2String + "&lt;font color='green'&gt;Blessed &lt;&lt;d"+blessBonus+"="+blessAttackBonus+"&lt;/font&gt; "]
};
{
    This may be the fallthrough (false isBlessed)
}]
[h: realAttack = realAttack + attackBonus]
[h,if(advantageDisadvantage != "None"): realAtkString = "&lt;b&gt;" + realAttack + "&lt;/b&gt;"]
[h: atkString = atkString + attack + "&lt;/b&gt;"]
[h: atk2String = atk2String + attack2 + "&lt;/b&gt;"]


[h: nameStr = getName() + "&lt;br&gt;&lt;br&gt;"]
[h: atkStr = "Attack (1d20 + " + attackBonus + "): " + atkString + "&lt;br&gt;"]
[h,if(advantageDisadvantage != "None"): atkStr = atkStr + advantageDisadvantage + ": " + atk2String + "&lt;br&gt;" + "Actual Attack: " + realAtkString + "&lt;br&gt;"]
[h: dmgStr = "Damage (" + dmgNumDice + "d" + dmgDie + " + " + dmgBonus]

[h: dmgStr = dmgStr + "): " + dmg + " " + damageType ]

[r: atkStr]
[r: dmgStr]</command>
  <label>Single</label>
  <group>Attack</group>
  <sortby>1</sortby>
  <autoExecute>true</autoExecute>
  <includeLabel>false</includeLabel>
  <applyToTokens>true</applyToTokens>
  <fontColorKey>black</fontColorKey>
  <fontSize>1.00em</fontSize>
  <minWidth/>
  <maxWidth/>
  <allowPlayerEdits>true</allowPlayerEdits>
  <toolTip>Requires selected token</toolTip>
  <displayHotKey>true</displayHotKey>
  <commonMacro>false</commonMacro>
  <compareGroup>true</compareGroup>
  <compareSortPrefix>true</compareSortPrefix>
  <compareCommand>true</compareCommand>
  <compareIncludeLabel>true</compareIncludeLabel>
  <compareAutoExecute>true</compareAutoExecute>
  <compareApplyToSelectedTokens>true</compareApplyToSelectedTokens>
</net.rptools.maptool.model.MacroButtonProperties>
