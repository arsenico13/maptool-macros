<list>
  <net.rptools.maptool.model.MacroButtonProperties>
    <macroUUID>87b1e33d-712e-4704-b647-ccdf24cc3cf8</macroUUID>
    <saveLocation></saveLocation>
    <index>1</index>
    <colorKey>red</colorKey>
    <hotKey>F12</hotKey>
    <command>&lt;!-- Constants --&gt;

[h: INPUT_JSON = &quot;multiWeaponAttackInputJson&quot;]
[h: ATK_BONUS = &quot;atkBonus&quot;]
[h: DMG_BONUS = &quot;dmgBonus&quot;]
[h: DMG_DIE = &quot;dmgDie&quot;]
[h: DMG_DICE = &quot;dmgDice&quot;]
[h: CRIT_BONUS_DICE = &quot;critBonusDice&quot;]
[h: NAME = &quot;name&quot;]
[h: DMG_TYPE = &quot;dmgType&quot;]
[h: RAGE_BONUS = &quot;rageBonus&quot;]
[h: IS_RAGING = &quot;isRaging&quot;]
[h: ADV_DISADV = &quot;advDisad&quot;]
[h: DMG_BONUS_EXPR = &quot;dmgBonusExpr&quot;]
[h: WEAPON_LIST = &quot;multiWeaponAttackWeaponList&quot;]
[h: NEW_WEAPON = &quot;NewWeapon&quot;]

&lt;!-- need the weapon list, it&apos;s a separate property --&gt;
[h, if (!isPropertyEmpty(WEAPON_LIST)): weaponListStr = getProperty(WEAPON_LIST); weaponListStr = NEW_WEAPON]
[r: &quot;weaponListStr: &quot; + weaponListStr + &quot;&lt;br&gt;&quot;]

&lt;!-- Default Input String --&gt;
[h: defInputString = &quot;tabWeaponChoice | Weapon Selection | true | TAB&quot;]
[h: defInputString = defInputString + &quot;## selectedWeapon | &quot; + NEW_WEAPON + &quot; | Select weapon | LIST | value=string&quot;] 
[h: defInputString = defInputString + &quot;## tab&quot; + NEW_WEAPON + &quot; | &quot; + NEW_WEAPON + &quot; | | TAB&quot;]
[h: defInputString = defInputString + &quot;## &quot; + NEW_WEAPON + &quot;.&quot; + NAME + &quot; | &quot;+ NEW_WEAPON + &quot; | Weapon Name | text&quot;]
[h: defInputString = defInputString + &quot;## &quot; + NEW_WEAPON + &quot;.&quot; + ATK_BONUS + &quot; | 0 | Attack Bonus | text&quot;]
[h: defInputString = defInputString + &quot;## &quot; + NEW_WEAPON + &quot;.&quot; + DMG_BONUS + &quot; | 0 | Damage Bonus | text&quot;]
[h: defInputString = defInputString + &quot;## &quot; + NEW_WEAPON + &quot;.&quot; + DMG_DIE + &quot; | 0 | Damge Die | text&quot;]
[h: defInputString = defInputString + &quot;## &quot; + NEW_WEAPON + &quot;.&quot; + DMG_DICE + &quot; | 0 | Damge Dice | text&quot;]
[h: defInputString = defInputString + &quot;## &quot; + NEW_WEAPON + &quot;.&quot; + CRIT_BONUS_DICE + &quot; | 0 | Bonus Critical Dice (extras only) | text&quot;]
[h: defInputString = defInputString + &quot;## &quot; + NEW_WEAPON + &quot;.&quot; + DMG_TYPE + &quot; | Slashing/Piercing/Bludgeoning | Damage Type | text&quot;]
[h: defInputString = defInputString + &quot;## &quot; + NEW_WEAPON + &quot;.&quot; + DMG_BONUS_EXPR + &quot; |  | Bonus Damage Roll Expression | text&quot;]
[h: defInputString = defInputString + &quot;## &quot; + NEW_WEAPON + &quot;.&quot; + RAGE_BONUS + &quot; | 0 | Rage Bonus | text&quot;]
[h: defInputString = defInputString + &quot;## &quot; + NEW_WEAPON + &quot;.&quot; + IS_RAGING + &quot; | Raging | check&quot;]
[h: defInputString = defInputString + &quot;## &quot; + NEW_WEAPON + &quot;.&quot; + ADV_DISADV + &quot; | None,Advantage,Disadvantage | Advantage/Disadvantage | list | value=string&quot;]

&lt;!-- Get the input string from the token --&gt;
[h, if (isPropertyEmpty(INPUT_JSON)): inputString = defInputString; inputString = getProperty(INPUT_JSON)]

&lt;!-- Prompt the user --&gt;
[h: abort(input(inputString))]

&lt;!-- The user has selected a weapon to attack with and may have input new values for that weapon, or even defined a new weapon --&gt;
&lt;!-- If the user selected the new weapon, take all the values for the New Weapon and create a new input string for that weapon --&gt;
&lt;!-- Easiest way to determine if a new weapon was selected, see if the new wepon name var has a different name --&gt;
&lt;!-- Instead of trying to dereference the variable name for a variable name, Just gonna use the literal, because effort --&gt;
[h, if (NewWeapon.name != NEW_WEAPON), code:
{
    &lt;!-- Add the new weapon to the existing list --&gt;
	[h: weaponListStr = weaponListStr + &quot;,&quot; + NewWeapon.name]

    &lt;!-- Transfer the new weapon stats to the other weapon&apos;s stats --&gt;
    [h: attributeList = json.fromList(&quot;%{selectedWeapon}.&quot; + NAME)]
    [h: attributeList = json.append(attributeList, &quot;%{selectedWeapon}.&quot; + ATK_BONUS)]
    [h: attributeList = json.append(attributeList, &quot;%{selectedWeapon}.&quot; + DMG_BONUS)] 
    [h: attributeList = json.append(attributeList, &quot;%{selectedWeapon}.&quot; + DMG_DIE)]
    [h: attributeList = json.append(attributeList, &quot;%{selectedWeapon}.&quot; + DMG_DICE)]
    [h: attributeList = json.append(attributeList, &quot;%{selectedWeapon}.&quot; + CRIT_BONUS_DICE)]
    [h: attributeList = json.append(attributeList, &quot;%{selectedWeapon}.&quot; + DMG_TYPE)] 
    [h: attributeList = json.append(attributeList, &quot;%{selectedWeapon}.&quot; + DMG_BONUS_EXPR)]
    [h: attributeList = json.append(attributeList, &quot;%{selectedWeapon}.&quot; + RAGE_BONUS)]
    [h: attributeList = json.append(attributeList, &quot;%{selectedWeapon}.&quot; + IS_RAGING)] 
    [h: attributeList = json.append(attributeList, &quot;%{selectedWeapon}.&quot; + ADV_DISADV)] 

    &lt;!-- Iterate through the attribute list and use the template to dereference the New Weapon attribute and the newly created weapon --&gt;
    [h, foreach (templateString, attributeList), code: {
        [h: selectedWeapon = NEW_WEAPON]
        [h: newWeaponVar = strformat(templateString)]
        [h: selectedWeapn = NewWeapon.name]
        [h: createdWeaponVar = strformat(templateString)]
        [h: expressionString = createdWeaponVar + &quot;=&quot; + newWeaponVar]
        [r: expressionString + &quot;&lt;br&gt;&quot;]
        [h: eval(expressionString)]
    };]
};{
	&lt;!-- you didn&apos;t create a new weapon --&gt;
};]

&lt;!-- Rebuild the wepon JSON string and stuff it onto the token --&gt;
[h: template = &quot;tabWeaponChoice | Weapon Selection | true | TAB&quot;]
[h: template = template + &quot;## selectedWeapon | %{selectedWeapon} | Select weapon | LIST | value=string&quot;] 
[h: template = template + &quot;## tab%{selectedWeapon} | %{selectedWeapon} | | TAB&quot;]
[h: template = template + &quot;## %{selectedWeapon}.&quot; + NAME + &quot; | %{selectedWeapon} | Weapon Name | text&quot;]
[h: template = template + &quot;## %{selectedWeapon}.&quot; + ATK_BONUS + &quot; | 0 | Attack Bonus | text&quot;]
[h: template = template + &quot;## %{selectedWeapon}.&quot; + DMG_BONUS + &quot; | 0 | Damage Bonus | text&quot;]
[h: template = template + &quot;## %{selectedWeapon}.&quot; + DMG_DIE + &quot; | 0 | Damge Die | text&quot;]
[h: template = template + &quot;## %{selectedWeapon}.&quot; + DMG_DICE + &quot; | 0 | Damge Dice | text&quot;]
[h: template = template + &quot;## %{selectedWeapon}.&quot; + CRIT_BONUS_DICE + &quot; | 0 | Bonus Critical Dice (extras only) | text&quot;]
[h: template = template + &quot;## %{selectedWeapon}.&quot; + DMG_TYPE + &quot; | Slashing/Piercing/Bludgeoning | Damage Type | text&quot;]
[h: template = template + &quot;## %{selectedWeapon}.&quot; + DMG_BONUS_EXPR + &quot; |  | Bonus Damage Roll Expression | text&quot;]
[h: template = template + &quot;## %{selectedWeapon}.&quot; + RAGE_BONUS + &quot; | 0 | Rage Bonus | text&quot;]
[h: template = template + &quot;## %{selectedWeapon}.&quot; + IS_RAGING + &quot; | Raging | check&quot;]
[h: template = template + &quot;## %{selectedWeapon}.&quot; + ADV_DISADV + &quot; | None,Advantage,Disadvantage | Advantage/Disadvantage | list | value=string&quot;]


[r: &quot;weaponListStr: &quot; + weaponListStr + &quot;&lt;br&gt;&quot;]
&lt;!-- If the user selected an exsting weapon, use that weapon&apos;s attacks stuff --&gt;

[h: weaponList = json.append(&quot;&quot;, weaponListStr)]
[h: newInputStr = &quot;&quot;]
[h, foreach(selectedWeapon, weaponList): newInputStr = newInputStr + strformat(newInputStr) + &quot;##&quot;)]
&lt;!-- Trim the trailing &apos;##&apos; --&gt;
[h: newInputStr = substring(newInputStr, 0, length(newInputStr) - 2)]
[r: newInputStr]





&lt;!-- Build a new input string and store it --&gt;


</command>
    <label>Multi Attacks</label>
    <group>Bode</group>
    <sortby>1</sortby>
    <autoExecute>true</autoExecute>
    <includeLabel>false</includeLabel>
    <applyToTokens>true</applyToTokens>
    <fontColorKey>black</fontColorKey>
    <fontSize>1.00em</fontSize>
    <minWidth></minWidth>
    <maxWidth></maxWidth>
    <allowPlayerEdits>true</allowPlayerEdits>
    <toolTip>Requires selected token</toolTip>
    <displayHotKey>true</displayHotKey>
    <commonMacro>false</commonMacro>
    <compareGroup>true</compareGroup>
    <compareSortPrefix>true</compareSortPrefix>
    <compareCommand>true</compareCommand>
    <compareIncludeLabel>true</compareIncludeLabel>
    <compareAutoExecute>true</compareAutoExecute>
    <compareApplyToSelectedTokens>true</compareApplyToSelectedTokens>
  </net.rptools.maptool.model.MacroButtonProperties>
  <net.rptools.maptool.model.MacroButtonProperties>
    <macroUUID>5dd07b6a-8f35-4e26-bc8d-d7d0581c2261</macroUUID>
    <saveLocation></saveLocation>
    <index>3</index>
    <colorKey>green</colorKey>
    <hotKey>None</hotKey>
    <command>[h: initBonus = getProperty(&quot;Initiative&quot;)]

[h: roll1 = 1d20 + initBonus]
[h: roll2 = 1d20 + initBonus]

Initiative: [r:roll1]&lt;br&gt;
&lt;i&gt;Advantage&lt;/i&gt;: [r:roll2]

[h: realInit = max(roll1, roll2)]
[h: setInitiative(realInit)]</command>
    <label>Bode Initiative</label>
    <group>Bode</group>
    <sortby>0</sortby>
    <autoExecute>true</autoExecute>
    <includeLabel>false</includeLabel>
    <applyToTokens>true</applyToTokens>
    <fontColorKey>white</fontColorKey>
    <fontSize>1.00em</fontSize>
    <minWidth></minWidth>
    <maxWidth></maxWidth>
    <allowPlayerEdits>true</allowPlayerEdits>
    <toolTip>1d20+1 w/ Advantage</toolTip>
    <displayHotKey>true</displayHotKey>
    <commonMacro>false</commonMacro>
    <compareGroup>true</compareGroup>
    <compareSortPrefix>true</compareSortPrefix>
    <compareCommand>true</compareCommand>
    <compareIncludeLabel>true</compareIncludeLabel>
    <compareAutoExecute>true</compareAutoExecute>
    <compareApplyToSelectedTokens>true</compareApplyToSelectedTokens>
  </net.rptools.maptool.model.MacroButtonProperties>
  <net.rptools.maptool.model.MacroButtonProperties>
    <macroUUID>3112890f-b32a-48c6-bea2-919d7c5b1725</macroUUID>
    <saveLocation></saveLocation>
    <index>4</index>
    <colorKey>default</colorKey>
    <hotKey>None</hotKey>
    <command>Roll 1: [r:1d20]&lt;br&gt;
Roll 2: [r:1d20]</command>
    <label> d20 Advantage/Disadvantage</label>
    <group>Generic</group>
    <sortby>99</sortby>
    <autoExecute>true</autoExecute>
    <includeLabel>true</includeLabel>
    <applyToTokens>false</applyToTokens>
    <fontColorKey>black</fontColorKey>
    <fontSize>1.00em</fontSize>
    <minWidth></minWidth>
    <maxWidth></maxWidth>
    <allowPlayerEdits>true</allowPlayerEdits>
    <toolTip></toolTip>
    <displayHotKey>true</displayHotKey>
    <commonMacro>false</commonMacro>
    <compareGroup>true</compareGroup>
    <compareSortPrefix>true</compareSortPrefix>
    <compareCommand>true</compareCommand>
    <compareIncludeLabel>true</compareIncludeLabel>
    <compareAutoExecute>true</compareAutoExecute>
    <compareApplyToSelectedTokens>true</compareApplyToSelectedTokens>
  </net.rptools.maptool.model.MacroButtonProperties>
  <net.rptools.maptool.model.MacroButtonProperties>
    <macroUUID>bad0448d-8ba9-45f9-a8bc-19fcb9dfd47f</macroUUID>
    <saveLocation></saveLocation>
    <index>5</index>
    <colorKey>default</colorKey>
    <hotKey>None</hotKey>
    <command>[h: fail=input(

&quot;num_dice | 0,1,2,3,4,5,6,7,8,9,10 | How many dice | list | select=1&quot;,
&quot;num_sides | 2,3,4,6,8,10,12,20,100 | Sided dice | list | value=string&quot;,
&quot;roll_bonus | 0 | Dice roll bonus | text&quot;,
&quot;show | 0 | Show only to Keeper | check&quot;

)]


[h: abort(fail)]


[h, c(num_dice): eval(&quot;roll&quot; + roll.count + &quot;=&quot; + roll(1,num_sides))]

[h: total=0]
[h, c(num_dice): total=total + eval(&quot;roll&quot; + roll.count)]
[h: total=total+roll_bonus]


[r, if(show==0), code: { 


   [r: getName() + &quot; rolled &lt;b&gt;&quot; + num_dice + &quot;d&quot; + num_sides + &quot;+&quot; + roll_bonus + &quot;&lt;/b&gt;&lt;br&gt;&quot;]
   [r, c(num_dice,&quot;&quot;): &quot;roll&quot; + (roll.count+1) + &quot;: &lt;b&gt;&quot; + eval(&quot;roll&quot; + roll.count) + &quot;&lt;/b&gt;&lt;br&gt;&quot;]
   [r: &quot;+&lt;b&gt;&quot; + roll_bonus + &quot;&lt;/b&gt;&lt;br&gt;&quot;]
   [r: &quot;Total= &lt;b&gt;&quot; + total + &quot;&lt;/b&gt;&quot;]



};{}]

[g, if(show==1), code: { 


   [r: getName() + &quot; rolled &lt;b&gt;&quot; + num_dice + &quot;d&quot; + num_sides + &quot;+&quot; + roll_bonus + &quot;&lt;/b&gt;&lt;br&gt;&quot;]
   [r, c(num_dice,&quot;&quot;): &quot;roll&quot; + (roll.count+1) + &quot;: &lt;b&gt;&quot; + eval(&quot;roll&quot; + roll.count) + &quot;&lt;/b&gt;&lt;br&gt;&quot;]
   [r: &quot;+&lt;b&gt;&quot; + roll_bonus + &quot;&lt;/b&gt;&lt;br&gt;&quot;]
   [r: &quot;Total= &lt;b&gt;&quot; + total + &quot;&lt;/b&gt;&quot;]



};{}]</command>
    <label>Die Roller</label>
    <group>Generic</group>
    <sortby></sortby>
    <autoExecute>true</autoExecute>
    <includeLabel>false</includeLabel>
    <applyToTokens>true</applyToTokens>
    <fontColorKey>black</fontColorKey>
    <fontSize>1.00em</fontSize>
    <minWidth></minWidth>
    <maxWidth></maxWidth>
    <allowPlayerEdits>true</allowPlayerEdits>
    <toolTip></toolTip>
    <displayHotKey>true</displayHotKey>
    <commonMacro>false</commonMacro>
    <compareGroup>true</compareGroup>
    <compareSortPrefix>true</compareSortPrefix>
    <compareCommand>true</compareCommand>
    <compareIncludeLabel>true</compareIncludeLabel>
    <compareAutoExecute>true</compareAutoExecute>
    <compareApplyToSelectedTokens>true</compareApplyToSelectedTokens>
  </net.rptools.maptool.model.MacroButtonProperties>
  <net.rptools.maptool.model.MacroButtonProperties>
    <macroUUID>6a573e39-7984-46bc-8016-451aeacd6b4f</macroUUID>
    <saveLocation></saveLocation>
    <index>6</index>
    <colorKey>default</colorKey>
    <hotKey>None</hotKey>
    <command>[r:1d20]</command>
    <label>1d20</label>
    <group>Generic</group>
    <sortby></sortby>
    <autoExecute>true</autoExecute>
    <includeLabel>true</includeLabel>
    <applyToTokens>false</applyToTokens>
    <fontColorKey>black</fontColorKey>
    <fontSize>1.00em</fontSize>
    <minWidth></minWidth>
    <maxWidth></maxWidth>
    <allowPlayerEdits>true</allowPlayerEdits>
    <toolTip></toolTip>
    <displayHotKey>true</displayHotKey>
    <commonMacro>false</commonMacro>
    <compareGroup>true</compareGroup>
    <compareSortPrefix>true</compareSortPrefix>
    <compareCommand>true</compareCommand>
    <compareIncludeLabel>true</compareIncludeLabel>
    <compareAutoExecute>true</compareAutoExecute>
    <compareApplyToSelectedTokens>true</compareApplyToSelectedTokens>
  </net.rptools.maptool.model.MacroButtonProperties>
  <net.rptools.maptool.model.MacroButtonProperties>
    <macroUUID>9e4d80e5-d39d-416f-8b79-9617de1a0bfa</macroUUID>
    <saveLocation></saveLocation>
    <index>7</index>
    <colorKey>default</colorKey>
    <hotKey>None</hotKey>
    <command>[r:1d12]</command>
    <label>1d12</label>
    <group>Generic</group>
    <sortby></sortby>
    <autoExecute>true</autoExecute>
    <includeLabel>true</includeLabel>
    <applyToTokens>false</applyToTokens>
    <fontColorKey>black</fontColorKey>
    <fontSize>1.00em</fontSize>
    <minWidth></minWidth>
    <maxWidth></maxWidth>
    <allowPlayerEdits>true</allowPlayerEdits>
    <toolTip></toolTip>
    <displayHotKey>true</displayHotKey>
    <commonMacro>false</commonMacro>
    <compareGroup>true</compareGroup>
    <compareSortPrefix>true</compareSortPrefix>
    <compareCommand>true</compareCommand>
    <compareIncludeLabel>true</compareIncludeLabel>
    <compareAutoExecute>true</compareAutoExecute>
    <compareApplyToSelectedTokens>true</compareApplyToSelectedTokens>
  </net.rptools.maptool.model.MacroButtonProperties>
  <net.rptools.maptool.model.MacroButtonProperties>
    <macroUUID>d81fe3d7-1038-4ab3-8548-9f69767fa480</macroUUID>
    <saveLocation></saveLocation>
    <index>8</index>
    <colorKey>default</colorKey>
    <hotKey>None</hotKey>
    <command>[r:1d10]</command>
    <label>1d10</label>
    <group>Generic</group>
    <sortby></sortby>
    <autoExecute>true</autoExecute>
    <includeLabel>true</includeLabel>
    <applyToTokens>false</applyToTokens>
    <fontColorKey>black</fontColorKey>
    <fontSize>1.00em</fontSize>
    <minWidth></minWidth>
    <maxWidth></maxWidth>
    <allowPlayerEdits>true</allowPlayerEdits>
    <toolTip></toolTip>
    <displayHotKey>true</displayHotKey>
    <commonMacro>false</commonMacro>
    <compareGroup>true</compareGroup>
    <compareSortPrefix>true</compareSortPrefix>
    <compareCommand>true</compareCommand>
    <compareIncludeLabel>true</compareIncludeLabel>
    <compareAutoExecute>true</compareAutoExecute>
    <compareApplyToSelectedTokens>true</compareApplyToSelectedTokens>
  </net.rptools.maptool.model.MacroButtonProperties>
  <net.rptools.maptool.model.MacroButtonProperties>
    <macroUUID>c49c6056-31ab-43ce-b7b2-5a7b9733ad2b</macroUUID>
    <saveLocation></saveLocation>
    <index>9</index>
    <colorKey>default</colorKey>
    <hotKey>None</hotKey>
    <command>[r:1d8]</command>
    <label>1d8</label>
    <group>Generic</group>
    <sortby></sortby>
    <autoExecute>true</autoExecute>
    <includeLabel>true</includeLabel>
    <applyToTokens>false</applyToTokens>
    <fontColorKey>black</fontColorKey>
    <fontSize>1.00em</fontSize>
    <minWidth></minWidth>
    <maxWidth></maxWidth>
    <allowPlayerEdits>true</allowPlayerEdits>
    <toolTip></toolTip>
    <displayHotKey>true</displayHotKey>
    <commonMacro>false</commonMacro>
    <compareGroup>true</compareGroup>
    <compareSortPrefix>true</compareSortPrefix>
    <compareCommand>true</compareCommand>
    <compareIncludeLabel>true</compareIncludeLabel>
    <compareAutoExecute>true</compareAutoExecute>
    <compareApplyToSelectedTokens>true</compareApplyToSelectedTokens>
  </net.rptools.maptool.model.MacroButtonProperties>
  <net.rptools.maptool.model.MacroButtonProperties>
    <macroUUID>d3cd8b48-9781-4200-a288-fbacbb0e1ba6</macroUUID>
    <saveLocation></saveLocation>
    <index>10</index>
    <colorKey>default</colorKey>
    <hotKey>None</hotKey>
    <command>[r:1d6]</command>
    <label>1d6</label>
    <group>Generic</group>
    <sortby></sortby>
    <autoExecute>true</autoExecute>
    <includeLabel>true</includeLabel>
    <applyToTokens>false</applyToTokens>
    <fontColorKey>black</fontColorKey>
    <fontSize>1.00em</fontSize>
    <minWidth></minWidth>
    <maxWidth></maxWidth>
    <allowPlayerEdits>true</allowPlayerEdits>
    <toolTip></toolTip>
    <displayHotKey>true</displayHotKey>
    <commonMacro>false</commonMacro>
    <compareGroup>true</compareGroup>
    <compareSortPrefix>true</compareSortPrefix>
    <compareCommand>true</compareCommand>
    <compareIncludeLabel>true</compareIncludeLabel>
    <compareAutoExecute>true</compareAutoExecute>
    <compareApplyToSelectedTokens>true</compareApplyToSelectedTokens>
  </net.rptools.maptool.model.MacroButtonProperties>
  <net.rptools.maptool.model.MacroButtonProperties>
    <macroUUID>430a9a44-20b5-44a1-8eb4-b9539b033c4f</macroUUID>
    <saveLocation></saveLocation>
    <index>11</index>
    <colorKey>default</colorKey>
    <hotKey>None</hotKey>
    <command>[r:1d4]</command>
    <label>1d4</label>
    <group>Generic</group>
    <sortby></sortby>
    <autoExecute>true</autoExecute>
    <includeLabel>true</includeLabel>
    <applyToTokens>false</applyToTokens>
    <fontColorKey>black</fontColorKey>
    <fontSize>1.00em</fontSize>
    <minWidth></minWidth>
    <maxWidth></maxWidth>
    <allowPlayerEdits>true</allowPlayerEdits>
    <toolTip></toolTip>
    <displayHotKey>true</displayHotKey>
    <commonMacro>false</commonMacro>
    <compareGroup>true</compareGroup>
    <compareSortPrefix>true</compareSortPrefix>
    <compareCommand>true</compareCommand>
    <compareIncludeLabel>true</compareIncludeLabel>
    <compareAutoExecute>true</compareAutoExecute>
    <compareApplyToSelectedTokens>true</compareApplyToSelectedTokens>
  </net.rptools.maptool.model.MacroButtonProperties>
  <net.rptools.maptool.model.MacroButtonProperties>
    <macroUUID>811dd97f-bd83-44b5-9c89-8d461300cd02</macroUUID>
    <saveLocation></saveLocation>
    <index>12</index>
    <colorKey>default</colorKey>
    <hotKey>None</hotKey>
    <command>[h: varry = 12]
[r, code: {
	&lt;!-- write code like a sane person --&gt;
	varry = 0;
	slonkey = &quot;blarb&quot;;
	obj = json.fromStrProp&quot;a=3; y=donkey; trey=kirk&quot;;

	varry;
	slonkey;
	obj;
}]
[varry]</command>
    <label>Test</label>
    <group>Bode</group>
    <sortby></sortby>
    <autoExecute>true</autoExecute>
    <includeLabel>false</includeLabel>
    <applyToTokens>true</applyToTokens>
    <fontColorKey>black</fontColorKey>
    <fontSize>1.00em</fontSize>
    <minWidth></minWidth>
    <maxWidth></maxWidth>
    <allowPlayerEdits>true</allowPlayerEdits>
    <toolTip></toolTip>
    <displayHotKey>true</displayHotKey>
    <commonMacro>false</commonMacro>
    <compareGroup>true</compareGroup>
    <compareSortPrefix>true</compareSortPrefix>
    <compareCommand>true</compareCommand>
    <compareIncludeLabel>true</compareIncludeLabel>
    <compareAutoExecute>true</compareAutoExecute>
    <compareApplyToSelectedTokens>true</compareApplyToSelectedTokens>
  </net.rptools.maptool.model.MacroButtonProperties>
  <net.rptools.maptool.model.MacroButtonProperties>
    <macroUUID>5c47e113-3028-4a14-9e6f-49abcdfc3e68</macroUUID>
    <saveLocation></saveLocation>
    <index>13</index>
    <colorKey>default</colorKey>
    <hotKey>None</hotKey>
    <command>&lt;!-- Create an input w/ Tabs. Each tab is a weapon known to the token --&gt;
&lt;!-- token property has a list of Weapons--&gt;

&lt;!-- Included in the weapon list, always last, is &quot;New Weapon&quot; w/ default values --&gt;

&lt;!-- Each tab is identical in form including a Name field and the same fields as Single Attack has --&gt;
&lt;!-- The weapon name is the &quot;key&quot; for the property name that stores a json string of the chosen values for that weapon --&gt;

&lt;!-- Those values are used for the attack roll --&gt;

</command>
    <label>Dynamic example</label>
    <group>Bode</group>
    <sortby></sortby>
    <autoExecute>true</autoExecute>
    <includeLabel>false</includeLabel>
    <applyToTokens>true</applyToTokens>
    <fontColorKey>black</fontColorKey>
    <fontSize>1.00em</fontSize>
    <minWidth></minWidth>
    <maxWidth></maxWidth>
    <allowPlayerEdits>true</allowPlayerEdits>
    <toolTip></toolTip>
    <displayHotKey>true</displayHotKey>
    <commonMacro>false</commonMacro>
    <compareGroup>true</compareGroup>
    <compareSortPrefix>true</compareSortPrefix>
    <compareCommand>true</compareCommand>
    <compareIncludeLabel>true</compareIncludeLabel>
    <compareAutoExecute>true</compareAutoExecute>
    <compareApplyToSelectedTokens>true</compareApplyToSelectedTokens>
  </net.rptools.maptool.model.MacroButtonProperties>
  <net.rptools.maptool.model.MacroButtonProperties>
    <macroUUID>1d3c6d9a-c9f5-46dc-9420-dafb76d220c5</macroUUID>
    <saveLocation></saveLocation>
    <index>14</index>
    <colorKey>default</colorKey>
    <hotKey>None</hotKey>
    <command>[h: input(&quot;selectedWeapon | New Weapon,Scimitard of Speed,Good Sword |Select the weapon | LIST | select=2 value=string&quot;)]
[r: selectedWeapon]
</command>
    <label>Iteration Testing</label>
    <group>Generic</group>
    <sortby></sortby>
    <autoExecute>true</autoExecute>
    <includeLabel>false</includeLabel>
    <applyToTokens>true</applyToTokens>
    <fontColorKey>black</fontColorKey>
    <fontSize>1.00em</fontSize>
    <minWidth></minWidth>
    <maxWidth></maxWidth>
    <allowPlayerEdits>true</allowPlayerEdits>
    <toolTip></toolTip>
    <displayHotKey>true</displayHotKey>
    <commonMacro>false</commonMacro>
    <compareGroup>true</compareGroup>
    <compareSortPrefix>true</compareSortPrefix>
    <compareCommand>true</compareCommand>
    <compareIncludeLabel>true</compareIncludeLabel>
    <compareAutoExecute>true</compareAutoExecute>
    <compareApplyToSelectedTokens>true</compareApplyToSelectedTokens>
  </net.rptools.maptool.model.MacroButtonProperties>
  <net.rptools.maptool.model.MacroButtonProperties>
    <macroUUID>15bf8c97-428b-46ef-82fa-a948276d9ffe</macroUUID>
    <saveLocation></saveLocation>
    <index>15</index>
    <colorKey>green</colorKey>
    <hotKey>None</hotKey>
    <command>&lt;!-- Constants --&gt;
[h: ATTACK_JSON = &quot;attackJSON&quot;]
[h: NAME = &quot;name&quot;]
[h: ATK_BONUS = &quot;atkBonus&quot;]
[h: DMG_BONUS = &quot;dmgBonus&quot;]
[h: DMG_DIE = &quot;dmgDie&quot;]
[h: DMG_DICE = &quot;dmgDice&quot;]
[h: CRIT_BONUS_DICE = &quot;critBonusDice&quot;]
[h: DMG_TYPE = &quot;dmgType&quot;]
[h: DMG_BONUS_EXPR = &quot;dmgBonusExpr&quot;]
[h: NEW_ATTACK = &quot;New Attack&quot;]

&lt;!-- Read attack JSON and prompt for selection --&gt;
[h, if (!isPropertyEmpty (ATTACK_JSON)), code: {
	&lt;!-- Property is populated. Fetch JSON data --&gt;
    [h: attackJson = getProperty(ATTACK_JSON)]
}; {
	&lt;!-- Property is empty, use blank object --&gt;
	[h: attackJson = &quot;&quot;]
}]

[h: arrLen = json.length(attackJson)]
[h, if (arrLen &lt; 1), code: {
	[h: selectedAttack = NEW_ATTACK]
}; {
    [h: attackList = NEW_ATTACK]  
    [h, foreach (attack, attackJson): attackList = json.append(attackList, json.get(attack, NAME))]
    [h: abort( input( &quot;selectedAttack | &quot; + json.toList(attackList) + &quot; | Select Attack | list | value=string&quot;))]
}]

&lt;!-- Attack selected! Fetch the JSON for the selected attack. If &quot;new&quot; was selected, nothing will be found --&gt;
[h: cfgAttack = json.fromStrProp(NAME + &quot;=&quot; + NEW_ATTACK)]
[r, foreach (attack, attackJson), code: {
	[h: attackName = json.get(attack, NAME)]
	[h, if (attackName == selectedAttack), code: {
		[cfgAttack = attack]
	};{ 0 }]
}]

&lt;!-- transfer json properties to input vars --&gt;
[h: inputAtkBonus = json.get(cfgAttack, ATK_BONUS)]
[h: inputDmgBonus = json.get(cfgAttack, DMG_BONUS)]
[h: inputDmgDie = json.get(cfgAttack, DMG_DIE)]
[h: inputDmgDice = json.get(cfgAttack, DMG_DICE)]
[h: inputName = json.get(cfgAttack, NAME)]
[h: inputCritBonus = json.get(cfgAttack, CRIT_BONUS_DICE)]
[h: inputDmgType = json.get(cfgAttack, DMG_TYPE)]
[h: inputDmgBonusExpr = json.get(cfgAttack, DMG_BONUS_EXPR)]

&lt;!-- Prompt the input --&gt;
[h: abort( input( &quot;inputName | &quot; + inputName + &quot; | Attack Name | text&quot;,
    &quot;inputAtkBonus | &quot; + inputAtkBonus + &quot; | Attack Bonus | text&quot;,
    &quot;inputDmgBonus | &quot; + inputDmgBonus + &quot; | Damage Bonus | text&quot;,
    &quot;inputDmgDie | &quot; + inputDmgDie + &quot; | Damage Die | text&quot;,
    &quot;inputDmgDice | &quot; + inputDmgDice + &quot; | Number of Damage Dice | text&quot;,
    &quot;inputDmgType | &quot; + inputDmgType + &quot; | Damage Type | text&quot;,
    &quot;inputCritBonus | &quot; + inputCritBonus + &quot; | Extra Critical Dice | text&quot;,
    &quot;inputDmgBonusExpr | &quot; + inputDmgBonusExpr + &quot; | Bonus Damage Expression | text&quot;,
    &quot;inputDeleteAttack | | Delete Attack | check&quot;))]

&lt;!-- Convert the input into a new JSON object --&gt;
[h: cfgAttack = json.set(cfgAttack, 
    NAME, inputName,
    ATK_BONUS, inputAtkBonus,
    DMG_BONUS, inputDmgBonus,
    DMG_DIE, inputDmgDie,
    DMG_DICE, inputDmgDice,
    CRIT_BONUS_DICE, inputCritBonus,
    DMG_TYPE, inputDmgType,
    DMG_BONUS_EXPR, inputDmgBonusExpr)]

[h, if (NEW_ATTACK == selectedAttack), code: {
    &lt;!-- If you added a new attack, just tack it into attackJson --&gt;
    [h: newAttackJson = json.append(attackJson, cfgAttack)]
}; {
    &lt;!-- But if you modifed and existing attack, iterate through the attackJson and replated it --&gt;
    [h: newAttackJson = &quot;&quot;]
    [h, foreach (attack, attackJson), code: {
        [h: attackName = json.get(attack, NAME)]
        [h: attack = if (attackName == selectedAttack, cfgAttack, attack)]
        [h: newAttackJson = if (inputDeleteAttack == 1 &amp;&amp; selectedAttack == json.get(attack, NAME), newAttackJson, json.append(newAttackJson, attack))]
    }]
}]
[h: setProperty(ATTACK_JSON, newAttackJson)]
[r, macro( &quot;Print AttackJSON@global&quot;): &quot;&quot;]
</command>
    <label>Attack Config</label>
    <group>Attack</group>
    <sortby>2</sortby>
    <autoExecute>true</autoExecute>
    <includeLabel>false</includeLabel>
    <applyToTokens>true</applyToTokens>
    <fontColorKey>black</fontColorKey>
    <fontSize>1.00em</fontSize>
    <minWidth></minWidth>
    <maxWidth></maxWidth>
    <allowPlayerEdits>true</allowPlayerEdits>
    <toolTip>Used to configure attacks. Should be executed at least once before Make Attack.
While this can only configure one attack per execution, bulk configuration is
made possible via Set AttackJSON.</toolTip>
    <displayHotKey>true</displayHotKey>
    <commonMacro>false</commonMacro>
    <compareGroup>true</compareGroup>
    <compareSortPrefix>true</compareSortPrefix>
    <compareCommand>true</compareCommand>
    <compareIncludeLabel>true</compareIncludeLabel>
    <compareAutoExecute>true</compareAutoExecute>
    <compareApplyToSelectedTokens>true</compareApplyToSelectedTokens>
  </net.rptools.maptool.model.MacroButtonProperties>
  <net.rptools.maptool.model.MacroButtonProperties>
    <macroUUID>39204e37-46f6-4b66-ab80-9f78e6c0c3b4</macroUUID>
    <saveLocation></saveLocation>
    <index>16</index>
    <colorKey>teal</colorKey>
    <hotKey>None</hotKey>
    <command>
[h: ATTACK_JSON = &quot;attackJSON&quot;]
[h: NAME = &quot;name&quot;]
[h: ATK_BONUS = &quot;atkBonus&quot;]
[h: DMG_BONUS = &quot;dmgBonus&quot;]
[h: DMG_DIE = &quot;dmgDie&quot;]
[h: DMG_DICE = &quot;dmgDice&quot;]
[h: CRIT_BONUS_DICE = &quot;critBonusDice&quot;]
[h: DMG_TYPE = &quot;dmgType&quot;]
[h: DMG_BONUS_EXPR = &quot;dmgBonusExpr&quot;]
[h: NEW_ATTACK = &quot;NewAttack&quot;]

[h: blankJsonArry = &quot;[]&quot;]
[h: blankJsonObj = &quot;{}&quot;]
[h: blankText = &quot;&quot;]
[h: abort( input( &quot; nothing | first | You might want to run Print AttackJSON macro | label&quot;,
	&quot; nothing | reset | You can reinitialize the array by inputting | label&quot;,
	&quot; newAttackJson | [] | New AtackJson | text | width=64&quot;))]
[h: isBlank = json.equals(blankJsonArry, newAttackJson) + json.equals(blankJsonObj, newAttackJson) + json.equals(blankText, newAttackJson)]

[s, r, if (isBlank &gt; 0): &quot;Aborting execution due to empty input&quot;; &quot;&quot;]
[h: newAttackJson = if (json.equals(&quot;reset&quot;, newAttackJson) == 1, &quot;[]&quot;, newAttackJson)]
[h, if (isBlank == 0): setProperty(ATTACK_JSON, newAttackJson); &quot;&quot;]	
[r, macro( &quot;Print AttackJSON@global&quot;): &quot;&quot;]</command>
    <label>Set AttackJSON</label>
    <group>Attack</group>
    <sortby>10</sortby>
    <autoExecute>true</autoExecute>
    <includeLabel>false</includeLabel>
    <applyToTokens>true</applyToTokens>
    <fontColorKey>black</fontColorKey>
    <fontSize>1.00em</fontSize>
    <minWidth></minWidth>
    <maxWidth></maxWidth>
    <allowPlayerEdits>true</allowPlayerEdits>
    <toolTip>Utility macro to apply an arbitrary JSON value for the property attackJSON. Currently no validation is done to ensure a proper format. While empty JSON objects are ignored to prevent accidental overwrites, the value &quot;reset&quot; will reset the object to a blank value.</toolTip>
    <displayHotKey>true</displayHotKey>
    <commonMacro>false</commonMacro>
    <compareGroup>true</compareGroup>
    <compareSortPrefix>true</compareSortPrefix>
    <compareCommand>true</compareCommand>
    <compareIncludeLabel>true</compareIncludeLabel>
    <compareAutoExecute>true</compareAutoExecute>
    <compareApplyToSelectedTokens>true</compareApplyToSelectedTokens>
  </net.rptools.maptool.model.MacroButtonProperties>
  <net.rptools.maptool.model.MacroButtonProperties>
    <macroUUID>f4e1d286-c621-4337-91c9-61538b1242d3</macroUUID>
    <saveLocation></saveLocation>
    <index>17</index>
    <colorKey>teal</colorKey>
    <hotKey>None</hotKey>
    <command>[h: ATTACK_JSON = &quot;attackJSON&quot;]
[h: NAME = &quot;name&quot;]
[h: ATK_BONUS = &quot;atkBonus&quot;]
[h: DMG_BONUS = &quot;dmgBonus&quot;]
[h: DMG_DIE = &quot;dmgDie&quot;]
[h: DMG_DICE = &quot;dmgDice&quot;]
[h: CRIT_BONUS_DICE = &quot;critBonusDice&quot;]
[h: DMG_TYPE = &quot;dmgType&quot;]
[h: DMG_BONUS_EXPR = &quot;dmgBonusExpr&quot;]
[h: NEW_ATTACK = &quot;NewAttack&quot;]
[h: attackJson = getProperty (ATTACK_JSON)]
[h: formatted = &quot;&lt;pre&gt;&quot; + json.indent(attackJson, 3) + &quot;&lt;/pre&gt;&quot;]
[s, r: formatted]</command>
    <label>Print AttackJSON</label>
    <group>Attack</group>
    <sortby>3</sortby>
    <autoExecute>true</autoExecute>
    <includeLabel>false</includeLabel>
    <applyToTokens>true</applyToTokens>
    <fontColorKey>black</fontColorKey>
    <fontSize>1.00em</fontSize>
    <minWidth></minWidth>
    <maxWidth></maxWidth>
    <allowPlayerEdits>true</allowPlayerEdits>
    <toolTip></toolTip>
    <displayHotKey>true</displayHotKey>
    <commonMacro>false</commonMacro>
    <compareGroup>true</compareGroup>
    <compareSortPrefix>true</compareSortPrefix>
    <compareCommand>true</compareCommand>
    <compareIncludeLabel>true</compareIncludeLabel>
    <compareAutoExecute>true</compareAutoExecute>
    <compareApplyToSelectedTokens>true</compareApplyToSelectedTokens>
  </net.rptools.maptool.model.MacroButtonProperties>
  <net.rptools.maptool.model.MacroButtonProperties>
    <macroUUID>394bcb42-a3a6-4d80-b11d-e6fb652cc0b8</macroUUID>
    <saveLocation></saveLocation>
    <index>18</index>
    <colorKey>red</colorKey>
    <hotKey>None</hotKey>
    <command>&lt;!-- Constants --&gt;
[h: ATTACK_JSON = &quot;attackJSON&quot;]
[h: NAME = &quot;name&quot;]
[h: ATK_BONUS = &quot;atkBonus&quot;]
[h: DMG_BONUS = &quot;dmgBonus&quot;]
[h: DMG_DIE = &quot;dmgDie&quot;]
[h: DMG_DICE = &quot;dmgDice&quot;]
[h: CRIT_BONUS_DICE = &quot;critBonusDice&quot;]
[h: DMG_TYPE = &quot;dmgType&quot;]
[h: DMG_BONUS_EXPR = &quot;dmgBonusExpr&quot;]
[h: NEW_ATTACK = &quot;New Attack&quot;]
[h: LAST_ATTACK_SELECTION = &quot;lastAttackSelection&quot;]

&lt;!-- Read attack JSON and prompt for selection --&gt;
[h, if (!isPropertyEmpty (ATTACK_JSON)), code: {
	&lt;!-- Property is populated. Fetch JSON data --&gt;
    [h: attackJson = getProperty(ATTACK_JSON)]
}; {
	&lt;!-- Property is empty, use blank object --&gt;
	[h: attackJson = &quot;&quot;]
}]

[h: arrLen = json.length(attackJson)]
[h, if (arrLen &lt; 1), code: {
	&lt;!-- no attacks found, so create one in the config macro --&gt;
	[h, macro(&quot;Attack Config@global&quot;): &quot;&quot;]
	[h: attackJson = getProperty(ATTACK_JSON)]
}; {
    &lt;!-- no-op --&gt;
}]

&lt;!-- Build an attack list to pick from --&gt;
[h: attackList = &quot;&quot;]
[h, foreach (attack, attackJson): attackList = json.append(attackList, json.get(attack, NAME))]

&lt;!-- Locate the index of the last selection to make it the default selection --&gt;
[h: lastSelection = getProperty(LAST_ATTACK_SELECTION)]
[h: selectedIndex = json.indexOf(attackList, lastSelection)]
[h: selectedIndex = if (selectedIndex &lt; 0, 0, selectedIndex)]

&lt;!-- User Input --&gt;
[h: abort( input(
    &quot;selectedAttack | &quot; + json.toList(attackList) + &quot; | Select Attack | list | value=string select=&quot; + selectedIndex,
    &quot;advantageDisadvantage|None,Advantage,Disadvantage|Advantage/Disadvantage|list|value=string&quot;
))]

&lt;!-- Save the selection for next execution as the default selection --&gt;
[h: setProperty(LAST_ATTACK_SELECTION, selectedAttack)]

&lt;!-- Attack selected! Fetch the JSON for the selected attack. --&gt;
[r, foreach (attack, attackJson), code: {
	[h: attackName = json.get(attack, NAME)]
	[h, if (attackName == selectedAttack), code: {
		[cfgAttack = attack]
	};{ 0 }]
}]

&lt;!-- transfer json properties to input vars --&gt;
[h: attackBonus = json.get(cfgAttack, ATK_BONUS)]
[h: dmgBonus = json.get(cfgAttack, DMG_BONUS)]
[h: dmgDie = json.get(cfgAttack, DMG_DIE)]
[h: dmgNumDice = json.get(cfgAttack, DMG_DICE)]
[h: attackName = json.get(cfgAttack, NAME)]
[h: critBonus = json.get(cfgAttack, CRIT_BONUS_DICE)]
[h: dmgType = json.get(cfgAttack, DMG_TYPE)]
[h: dmgBonusExpr = json.get(cfgAttack, DMG_BONUS_EXPR)]

&lt;!-- Roll attack dice (always roll two, determine if advantage or disadvantage applies after --&gt;
&lt;!-- Unlike dmg rolls that use a full text expression, attack is done in discrete steps to determine criticals --&gt;
[h: attack = 1d20]
[h: attack2 = 1d20]

&lt;!-- Calculate the correct attack roll --&gt;
[h: realAttack = attack]
[h,if (advantageDisadvantage == &quot;Advantage&quot;): realAttack = max(attack, attack2)]
[h,if (advantageDisadvantage == &quot;Disadvantage&quot;): realAttack = min(attack, attack2)]

&lt;!-- Apply critical --&gt;
[h,if (realAttack == 20): dmgNumDice = (dmgNumDice * 2) + critBonus]

&lt;!-- Roll damage --&gt;
[h: dmgExpression = dmgNumDice + &quot;d&quot; + dmgDie + &quot; + &quot; + dmgBonus]
[h: noDmgExpression = json.equals(dmgBonusExpr, &quot;&quot;) + json.equals(dmgBonusExpr, 0)]
[h: dmgExpression = if (noDmgExpression &gt; 0, dmgExpression, dmgExpression + &quot; + &quot; + dmgBonusExpr)]
[h: dmg = eval(dmgExpression)]

&lt;!-- Build the message --&gt;
[h: atkString = &quot;&lt;b&gt;&quot;]
[h: atk2String = &quot;&lt;b&gt;&quot;]
[h,if(attack == 20): atkString = atkString + &quot;&lt;font color=&apos;red&apos;&gt;&lt;i&gt;CRITICAL&lt;/i&gt;&lt;/font&gt; &quot;]
[h,if(attack2 == 20): atk2String = atk2String + &quot;&lt;font color=&apos;red&apos;&gt;&lt;i&gt;CRITICAL&lt;/i&gt;&lt;/font&gt; &quot;]
[h: attack = attack + attackBonus]
[h: attack2 = attack2 + attackBonus]
[h: realAttack = realAttack + attackBonus]
[h,if(advantageDisadvantage != &quot;None&quot;): realAtkString = &quot;&lt;b&gt;&quot; + realAttack + &quot;&lt;/b&gt;&quot;]
[h: atkString = atkString + attack + &quot;&lt;/b&gt;&quot;]
[h: atk2String = atk2String + attack2 + &quot;&lt;/b&gt;&quot;]

[h: nameStr = getName() + &quot;: &quot; + attackName + &quot;&lt;br&gt;(&quot; + dmgType + &quot;)&lt;br&gt;&lt;br&gt;&quot;]
[h: atkStr = &quot;Attack (1d20 + &quot; + attackBonus + &quot;): &quot; + atkString + &quot;&lt;br&gt;&quot;]
[h,if(advantageDisadvantage != &quot;None&quot;): atkStr = atkStr + advantageDisadvantage + &quot;: &quot; + atk2String + &quot;&lt;br&gt;&lt;br&gt;Actual Attack: &quot; + realAtkString + &quot;&lt;br&gt;&quot;]
[h: dmgStr = &quot;Damage (&quot; + dmgExpression + &quot;): &quot; + dmg]

[r: nameStr]
[r: atkStr]
[r: dmgStr]</command>
    <label>Make Attack</label>
    <group>Attack</group>
    <sortby>1</sortby>
    <autoExecute>true</autoExecute>
    <includeLabel>false</includeLabel>
    <applyToTokens>true</applyToTokens>
    <fontColorKey>black</fontColorKey>
    <fontSize>1.00em</fontSize>
    <minWidth>50</minWidth>
    <maxWidth></maxWidth>
    <allowPlayerEdits>true</allowPlayerEdits>
    <toolTip></toolTip>
    <displayHotKey>true</displayHotKey>
    <commonMacro>false</commonMacro>
    <compareGroup>true</compareGroup>
    <compareSortPrefix>true</compareSortPrefix>
    <compareCommand>true</compareCommand>
    <compareIncludeLabel>true</compareIncludeLabel>
    <compareAutoExecute>true</compareAutoExecute>
    <compareApplyToSelectedTokens>true</compareApplyToSelectedTokens>
  </net.rptools.maptool.model.MacroButtonProperties>
</list>
