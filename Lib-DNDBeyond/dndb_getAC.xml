<net.rptools.maptool.model.MacroButtonProperties>
  <macroUUID>60638481-abef-4f11-b5bf-b4d103d8b20c</macroUUID>
  <saveLocation>Token</saveLocation>
  <index>26</index>
  <colorKey>default</colorKey>
  <hotKey>None</hotKey>
  <command>[h: toon = arg (0)]

&lt;!-- Create a dummy "unarmed" armor just to make the next everything easier --&gt;
[h: unarmored = json.set ("", "equipped", "true",
	"definition", json.set ("", "armorClass", 10,
				"baseArmorName", "Unarmored",
				"filterType", "Armor",
				"name", "Unarmored",
				"stealthCheck", 1,
				"armorTypeId", 1))]
&lt;!-- And a dummy "noShield" --&gt;
[h: noShield = json.set ("", "equipped", "true",
	"definition", json.set ("", "armorClass", 0,
				"baseArmorName", "No Shield",
				"filterType", "Shield",
				"name", "No Shield",
				"stealthCheck", 1,
				"armorTypeId", 4))]

&lt;!-- Get all armors and shields from inventory --&gt;
[h: allArmors = dndb_getArmor (toon)]

&lt;!-- Determine equipped armor --&gt;
[h: armors = json.path.read (allArmors, "[*].[?(@.definition.armorTypeId != 4)]")]
&lt;!-- Select first equipped armor. log.warn if there are more --&gt;
[h: equippedArmors = json.path.read (armors, "[*].[?(@.equipped == true)]")]
[h: equippedArmorNum = json.length (equippedArmors)]
[h, if (equippedArmorNum &gt; 1): log.warn ("Too many armors equipped, selecting first found armor")]
[h, if (equippedArmorNum &gt; 0): equippedArmor = json.get(equippedArmors, 0); 
	equippedArmor = unarmored]
&lt;!-- adorn the armor with bonuses --&gt;
[h: equippedArmor = dndb_setArmorBonus (equippedArmor)]
[h: log.debug ("Selecting equipped armor: " + equippedArmor)]

&lt;!-- determine equipped shield --&gt;
[h: shields = json.path.read (allArmors, "[*].[?(@.definition.armorTypeId == 4)]")]
&lt;!-- Select first equipped shield. log.warn if there are more --&gt;
[h: equippedShields = json.path.read (shields, "[*].[?(@.equipped == true)]")]
[h: equippedShieldNum = json.length (equippedShields)]
[h, if (equippedShieldNum &gt; 1): log.warn ("Too many shields equipped, selecting first found shield")]
[h, if (equippedShieldNum &gt; 0): equippedShield = json.get(equippedShields, 0); 
	equippedShield = noShield]
&lt;!-- adorn the shield with bonuses --&gt;
[h: equippedShield = dndb_setArmorBonus (equippedShield)]
[h: log.debug ("Selecting equipped shield: " + equippedShield)]

&lt;!-- Calculate Dexterity bonus --&gt;
[h: attributes = dndb_getAbilities (toon)]
[h: dexBonus = json.get (attributes, "dexBonus")]

&lt;!-- Apply dex bonus --&gt;
&lt;!-- rules: --&gt;
&lt;!-- no or light armor: full dex bonus --&gt;
&lt;!-- medium armor: dex bonus, up to +2 --&gt;
&lt;!-- heavy armor: No dex bonus (positive or negative) --&gt;
[h: armorTypeId = json.path.read (equippedArmor, "definition.armorTypeId")]
[h: log.debug ("armorTypeId: " + armorTypeId)]
[h, switch ( armorTypeId ):
	case "1" : dexBonus = dexBonus;
	case "2" : dexBonus = math.min (dexBonus, 2);
	case "3" : dexBonus = 0
]
[h: log.debug ("dexBonus (calculated): " + dexBonus)]

&lt;!-- Look for other modifiers from class abilities --&gt;
&lt;!-- Lets defer this to another script for brevity --&gt;
[h: classACBonus = dndb_getACBonusFromClasses (toon)]
[h: log.debug ("classACBonus: " + json.indent (classACBonus))]

&lt;!-- And build it --&gt;
&lt;!-- Lets recap the players --&gt;
&lt;!-- total: every thing --&gt;
&lt;!-- dexterity: dex bonus, modified --&gt;
&lt;!-- armor: just the equipped armor --&gt;
&lt;!-- shield: just the equipped shield --&gt;
&lt;!-- feature: whatever the feature is providing --&gt;
[h: armorBonus = json.get (equippedArmor, "totalAC")]
[h: log.debug ("armorBonus: " + armorBonus)]
[h: shieldBonus = json.get (equippedShield, "totalAC")]
[h: log.debug ("shieldBonus: " + shieldBonus)]
&lt;!-- calculate what we have so far --&gt;
[h: totalACBonus = armorBonus + shieldBonus + dexBonus]
&lt;!-- build the base object --&gt;
[h: acObj = json.set ("", "Dexterity", dexBonus,
		"Armor", armorBonus,
		"Shield", shieldBonus)]
&lt;!-- and the class features --&gt;
[h: totalClassACBonus = json.get (classACBonus, "totalClassACBonus")]
[h: totalACBonus = totalACBonus + totalClassACBonus]
[h, foreach (classFeature, json.get (classACBonus, "classFeatures")), code: {
	[h: classBonus = json.get (classFeature, "dndb_bonus")]
	[h: featureName = json.path.read (classFeature, "definition.name")]
	[h: acObj = json.set (acObj, featureName, classBonus)]
}]
&lt;!-- hope this added up correctly --&gt;
[h: acObj = json.set (acObj, "total", totalACBonus)]
[h: macro.return = acObj]</command>
  <label>dndb_getAC</label>
  <group>Character</group>
  <sortby/>
  <autoExecute>true</autoExecute>
  <includeLabel>false</includeLabel>
  <applyToTokens>false</applyToTokens>
  <fontColorKey>black</fontColorKey>
  <fontSize>1.00em</fontSize>
  <minWidth/>
  <maxWidth/>
  <allowPlayerEdits>false</allowPlayerEdits>
  <toolTip>Given a character, returns an object with all AC bonuses.

arg(0) : toon

returns acObj
(example)

{
	"total" : 18,
	"Armor" : 10,
	"Dexterity" : 1,
	"Unarmored Bonus" : 4,
	"Shield" : 3
}</toolTip>
  <displayHotKey>true</displayHotKey>
  <commonMacro>false</commonMacro>
  <compareGroup>true</compareGroup>
  <compareSortPrefix>true</compareSortPrefix>
  <compareCommand>true</compareCommand>
  <compareIncludeLabel>true</compareIncludeLabel>
  <compareAutoExecute>true</compareAutoExecute>
  <compareApplyToSelectedTokens>true</compareApplyToSelectedTokens>
</net.rptools.maptool.model.MacroButtonProperties>
