<net.rptools.maptool.model.MacroButtonProperties>
  <macroUUID>513c222f-0341-4c3d-90f3-465bbef1af22</macroUUID>
  <saveLocation>Token</saveLocation>
  <index>42</index>
  <colorKey>default</colorKey>
  <hotKey>None</hotKey>
  <command>[h: toon = arg (0)]

[h: speedsMap = json.append ("",
			json.set ("", "name", "Burrow", "verb", "burrowing"),
			json.set ("", "name", "Climb", "verb", "climbing"),
			json.set ("", "name", "Swim", "verb", "swimming"),
			json.set ("", "name", "Walk", "verb", "walking")
			)
]
[h, if (json.length (macro.args) &gt; 1): 
	speedNames = json.append ("", arg(1));
	speedNames = json.append ("", "Burrow", "Climb", "Swim", "Walk")
]

[h: speeds = "[]"]

&lt;!-- Collect base speeds from ractial traits --&gt;
[h: baseSpeeds = json.path.read (toon, "data.race.weightSpeeds.normal")]

&lt;!-- all speeds bonuses --&gt;
[h: allBonuses = dndb_searchGrantedModifiers (json.set ("", 
							"object", toon,
							"property", "value",
							"subType", "speed",
							"type", "bonus"))]
							
[h: log.debug ("allBonuses: " + allBonuses)]

[h: allBonus = 0]
[h, foreach (value, allBonuses): allBonus = allBonus + value]

&lt;!-- Foreach speed type, find all the granted bonuses --&gt;
[h, foreach (speedName, speedNames), code: {
	&lt;!-- I may have to revisit this after some testing, but so far Ive only found --&gt;
	&lt;!-- granted bonuses as setting speeds to innate-speed-swimming, for example. --&gt;
	&lt;!-- So look for those for each speed and well add the allBonus values after --&gt;
	[h: verbSpeed = json.get (dndb_searchJsonObject (json.set ("", "object", speedsMap, "property", "verb", "name", speedName)), 0)]
	[h: innateSpeed = "innate-speed-" + verbSpeed]
	[h: grantedSpeeds = dndb_searchGrantedModifiers (json.set ("", 
							"object", toon,
							"property", "value",
							"type", "set",
							"subType", innateSpeed))]
	[h: log.debug ("grantedSpeeds: " + json.indent (grantedSpeeds))]
	[h: setSpeed = 0]
	[h, if (json.length (grantedSpeeds) &gt; 0), code: {
		&lt;!-- get the biggest one --&gt;
		[h: grantedSpeeds = json.sort (grantedSpeeds, "descending")]
		[h: setSpeed = json.get (grantedSpeeds, 0)]
	}]

	&lt;!-- Find custom speeds and use as overrides --&gt;
	[h: lowerName = lower (speedName)]
	[h: baseSpeed = json.get (baseSpeeds, lowerName)]
	[h: actualSpeed = math.max (baseSpeed, setSpeed)]
	&lt;!-- if actualSpeed is 0, dont apply the allBonus to it --&gt;
	[h, if (actualSpeed &gt; 0): actualSpeed = actualSpeed + allBonus]
	[h: speed = json.set ("", "name", speedName,
						"speed", actualSpeed)]
	[h: speeds = json.append (speeds, speed)]
}]

[h: macro.return = speeds]


&lt;!-- Determine encumberance? Its a variant, so skip for now until we determine --&gt;
&lt;!-- a good way of passing that flag --&gt;</command>
  <label>dndb_getSpeed</label>
  <group>Character</group>
  <sortby/>
  <autoExecute>true</autoExecute>
  <includeLabel>false</includeLabel>
  <applyToTokens>false</applyToTokens>
  <fontColorKey>black</fontColorKey>
  <fontSize>1.00em</fontSize>
  <minWidth/>
  <maxWidth/>
  <allowPlayerEdits>false</allowPlayerEdits>
  <toolTip>Returns the speeds, or requested speed, from the given character

arg(0) = toon
Optional: arg(1) = speed type (ex. "Swimming")

returns:

[
	{
		"name":	"Walking",
		"speed":	"30"
	},{
		"name":	"Swimming",
		"speed":	"30"
	}
]</toolTip>
  <displayHotKey>true</displayHotKey>
  <commonMacro>false</commonMacro>
  <compareGroup>true</compareGroup>
  <compareSortPrefix>true</compareSortPrefix>
  <compareCommand>true</compareCommand>
  <compareIncludeLabel>true</compareIncludeLabel>
  <compareAutoExecute>true</compareAutoExecute>
  <compareApplyToSelectedTokens>true</compareApplyToSelectedTokens>
</net.rptools.maptool.model.MacroButtonProperties>
