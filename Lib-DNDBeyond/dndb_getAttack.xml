<net.rptools.maptool.model.MacroButtonProperties>
  <macroUUID>a68dca2d-f9ff-43c6-8050-ddcb85ec7e61</macroUUID>
  <saveLocation>Token</saveLocation>
  <index>60</index>
  <colorKey>default</colorKey>
  <hotKey>None</hotKey>
  <command>&lt;!-- Callers must pass in the character json themselves. No getter methods should shoulder the --&gt;
&lt;!-- responsibility of calling dndb_getCharJSON --&gt;
[h: toon = arg(0)]

&lt;!-- AttackJSON constants --&gt;
[h: ATTACK_JSON = "attackJSON"]
[h: JSON_NAME = "name"]
[h: ATK_BONUS = "atkBonus"]
[h: DMG_BONUS = "dmgBonus"]
[h: DMG_DIE = "dmgDie"]
[h: DMG_DICE = "dmgDice"]

&lt;!-- Crit bonus dice is gonna be dodgey... Use Bode to see if theres a common json path--&gt;
[h: CRIT_BONUS_DICE = "critBonusDice"]
[h: DMG_TYPE = "dmgType"]
[h: DMG_BONUS_EXPR = "dmgBonusExpr"]

[h: attributes = dndb_getAbilities (toon)]
[h: proficiencyBonus = dndb_getProficiencyBonus (toon)]
[h: weapons = dndb_getWeapon (toon)]

&lt;!-- restrict to those that are equipped --&gt;
[h: weapons = json.path.read (weapons, ".[?(@.equipped == 'true')]")]

[h: weapons = json.append (weapons, dndb_getUnarmedStrike (toon))]
&lt;!-- default to getting equipped weapons. Maybe we'll add an option later for full list.
&lt;!-- Fuck that, make getWeapons do it
&lt;!-- Defer attack and damage calculations to other macros. They need the work --&gt;

&lt;!-- get Rage feature --&gt;
[h: rageBonus = 0]
[h: ragefeatures = json.path.read (toon, "data.classes..[?(@.definition.name == 'Rage')]['levelScale']")]
[h, if (json.length (rageFeatures) &gt; 0): rageBonus = json.get (json.get (rageFeatures, 0), "fixedValue")]

[h: attackJson = ""]
[h, foreach (weapon, weapons), code: {
	&lt;!-- does not include normal critical dice --&gt;
	[h: critBonusDice = dndb_getCriticalBonusDice (toon, weapon)]
	[h: weaponDmgBonus = dndb_getDamageModifierForWeapon (toon, weapon)]
	[h: weaponAtkBonus = dndb_getAttackModifierForWeapon (toon, weapon)]
	[h: critBonus = dndb_getCriticalBonusDice (toon, weapon)]
	[h: name = json.get (weapon, "name")]
	&lt;!-- commas are scary --&gt;
	[h: name = replace (name, ",", " ")]
	[h: attackJsonObj = json.set ("", JSON_NAME, name,
			ATK_BONUS, weaponAtkBonus,
			DMG_BONUS, weaponDmgBonus,
			DMG_DIE, json.get (weapon, "dmgDie"),
			DMG_DICE, json.get (weapon, "dmgDice"),
			CRIT_BONUS_DICE, critBonus,
			DMG_TYPE, json.get (weapon, "dmgType"))]
	[h: attackJson = json.append (attackJson, attackJsonObj)]
	&lt;!-- Ragable? Make a rage version --&gt;
	[h, if (rageBonus &gt; 0 &amp;&amp; json.get (weapon, "attackType") == "Melee"), code: {
		[h: attackJsonObj = json.set (attackJsonObj, 
			JSON_NAME, name + " - Raging",
			DMG_BONUS, weaponDmgBonus + rageBonus)]
		[h: attackJson = json.append (attackJson, attackJsonObj)]
	}]
}]

[h: macro.return = attackJson]</command>
  <label>dndb_getAttack</label>
  <group>Character</group>
  <sortby/>
  <autoExecute>true</autoExecute>
  <includeLabel>false</includeLabel>
  <applyToTokens>false</applyToTokens>
  <fontColorKey>black</fontColorKey>
  <fontSize>1.00em</fontSize>
  <minWidth/>
  <maxWidth/>
  <allowPlayerEdits>false</allowPlayerEdits>
  <toolTip>This is a function that requires the DND Beyond Character full JSON. It's not intended to run stand-alone.

This will pair with a separate class of macros centered around the property 'attackJSON'. It will build this property from the class, inventory, and modifier information from the character JSON.</toolTip>
  <displayHotKey>true</displayHotKey>
  <commonMacro>false</commonMacro>
  <compareGroup>true</compareGroup>
  <compareSortPrefix>true</compareSortPrefix>
  <compareCommand>true</compareCommand>
  <compareIncludeLabel>true</compareIncludeLabel>
  <compareAutoExecute>true</compareAutoExecute>
  <compareApplyToSelectedTokens>true</compareApplyToSelectedTokens>
</net.rptools.maptool.model.MacroButtonProperties>
