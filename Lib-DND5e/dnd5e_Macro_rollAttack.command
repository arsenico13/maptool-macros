[h: inputObj = arg (0)]
[h: dnd5e_AttackEditor_assertVersion()]
[h: selectedAttack = json.get (inputObj, "selectedAttack")]
[h: advDisadv = json.get (inputObj, "advDisadv")]
[h, if (advDisadv == ""): advDisadv = json.get (inputObj, "advantageDisadvantage"); ""]
[h: attackObj = dnd5e_AttackEditor_getAttackExpression ()]
[h: log.debug ("rollAttack: attackObj = " + attackObj)]
[h: rollExpressions = json.get (attackObj, selectedAttack)]
[h, if (advDisadv == "Advantage" || advDisadv == "Both"): hasAdvantage = 1; hasAdvantage = 0]
[h, if (advDisadv == "Disadvantage" || advDisadv == "Both"): hasDisadvantage = 1; hasDisadvantage = 0]

[h: updatedRollExpressions = "[]"]
[h, foreach (rollExpression, rollExpressions), code: {
	[if (dnd5e_RollExpression_hasType (rollExpression, "Attack")), code: {
		[rollExpression = dnd5e_RollExpression_setAdvantage (rollExpression, hasAdvantage)]
		[rollExpression = dnd5e_RollExpression_setDisadvantage (rollExpression, hasDisadvantage)]
	};{""}]
	[updatedRollExpressions = json.append (updatedRollExpressions, rollExpression)]
}]
[h: rolledExpression = dnd5e_DiceRoller_roll (updatedRollExpressions)]
[h: firstExp = dnd5e_RollExpression_addTypedDescriptor(json.get(rolledExpression, 0), "rollerId", currentToken())]
[h: rolledExpression = json.set(rolledExpression, 0, firstExp)]
[h: rolledExpression = dnd5e_SavedAttacks_setKey(rolledExpression)]
[h: log.debug("Final attack roll expression: " + json.indent(rolledExpression))]
[r: dnd5e_RollExpression_getFormattedOutput(rolledExpression)]
[h: dnd5e_SavedAttacks_push(rolledExpression)]