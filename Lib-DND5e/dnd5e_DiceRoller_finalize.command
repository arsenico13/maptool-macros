[h: rollExpression = arg (0)]
[h: diceSize = dnd5e_RollExpression_getDiceSize (rollExpression)]
[h: diceRolled = dnd5e_RollExpression_getDiceRolled (rollExpression)]
[h: bonus = dnd5e_RollExpression_getBonus (rollExpression)]
[h, if(bonus != 0): bonusOutput = if(bonus > 0, " + " + bonus, " - " + (bonus * -1)); bonusOutput = ""]
[h: baseRoll = diceRolled + "d" + diceSize]
[h: tooltipRoll = baseRoll + bonusOutput]
[h: individualRolls = json.get (rollExpression, "individualRolls")]
[h, if (!json.isEmpty(individualRolls)):tooltipDetail = "(" + json.toList(individualRolls, "+") + ")"; tooltipDetail = ""]
[h: tooltipDetail = tooltipDetail + bonusOutput]

[h: rollString = dnd5e_RollExpression_getRollString (rollExpression)]

<!-- iterate the children to get their tooltips and sub-totals -->
[h: childTipDetails = ""]
[h: childTipRolls = ""]
[h: childTotals = 0]
[h, foreach (child, dnd5e_RollExpression_getExpressions(rollExpression), ""), code: {
	[childTotal = dnd5e_RollExpression_getTotal (child)]
	[childTotals = childTotals + childTotal]
	[tipDetail = dnd5e_RollExpression_getTypedDescriptor (child, "tooltipDetail")]
	[childTipDetails = childTipDetails + " + " + tipDetail]
	[tipRoll = dnd5e_RollExpression_getTypedDescriptor (child, "tooltipRoll")]
	[childTipRolls = childTipRolls + " + " + tipRoll]
}]

[h: rolls = dnd5e_RollExpression_getRolls (rollExpression)]
[h: log.debug (getMacroName() + ": rolls = " + rolls)]
[h: totals = "[]"]
[h, foreach (roll, rolls), code: {
	[total = roll + bonus + childTotals]
	[totals = json.append (totals, total)]
}]

[h: roll = dnd5e_RollExpression_getRoll (rollExpression)]
[h: total = bonus + roll + childTotals]
[h: log.debug (getMacroName() + ": rollExpression = " + rollExpression)]
[h: rollExpression = json.set (rollExpression, "total", total, "totals", totals)]
[h: rollExpression = dnd5e_RollExpression_addTypedDescriptor(rollExpression, "tooltipRoll", tooltipRoll + childTipRolls)]
[h: rollExpression = dnd5e_RollExpression_addTypedDescriptor(rollExpression, "tooltipDetail", tooltipDetail + childTipDetails)]
[h: macro.return = rollExpression]