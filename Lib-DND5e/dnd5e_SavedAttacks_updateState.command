[h: log.debug(getMacroName() + ": args=" + json.indent(macro.args))]
[h: state = arg(0)]
[h: damageOutput = arg(1)]
[h: exp = arg(2)]
[h: damage = json.get(damageOutput, "damage")]
[h: state = json.set(state, "totalDamage", json.get(state, "totalDamage") + damage)]
[h: output = json.get(state, "output")]
[h: tt = dnd5e_RollExpression_getTypedDescriptor(exp, "tooltipRoll") + " = " 
		+ dnd5e_RollExpression_getTypedDescriptor(exp, "tooltipDetail") + " = " + dnd5e_RollExpression_getTotal(exp)]
[h: applied = json.get(damageOutput, "applied")]
[h, if (applied != ""): applied = "(" + applied + ")"]
[h, if (damage != dnd5e_RollExpression_getTotal(exp)): tt = tt + ", Adjusted" + applied + ": " + damage]
[h: outText = "Damage: " + damage + " " + capitalize(json.get(damageOutput, "type"))]
[h: output = output + " <span title='" + tt + "'>" + outText + "</span>"]
[h: saveOutput = json.get(damageOutput, "saveOutput")]
[h, if (saveOutput != ""): output = output + " (" + saveOutput + ")"]
[h: player = json.get(state, "player")]
[h, if (applied != ""): applied = " " + applied]
[h: player = json.append(player, strformat('{"text":"%s"}', outText + applied))]
[h: macro.return = json.set(state, "output", output + ",", "player", player))]