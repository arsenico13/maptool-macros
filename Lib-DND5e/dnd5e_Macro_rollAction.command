[h: inputObj = arg(0)]
[h: dnd5e_AE2_assertVersion()]
[h: selectedAttack = json.get (inputObj, "actionName")]
[h: advDisadv = json.get (inputObj, "advDisadv")]
[h: attackObj = getProperty("_AE2_Actions")]
[h: rollExpressions = json.get (attackObj, selectedAttack)]
[h: log.debug("dnd5e_Macro_rollAction: selectedAttack=" + selectedAttack + " advDisadv=" + advDisadv + " action=" + json.indent(rollExpressions))]
[h, if (advDisadv == "Advantage" || advDisadv == "Both"): hasAdvantage = 1; hasAdvantage = 0]
[h, if (advDisadv == "Disadvantage" || advDisadv == "Both"): hasDisadvantage = 1; hasDisadvantage = 0]

[h: updatedRollExpressions = "[]"]
[h, foreach (rollExpression, rollExpressions), code: {
	[if (dnd5e_RollExpression_hasType (rollExpression, "Attack")), code: {
		[rollExpression = dnd5e_RollExpression_setAdvantage (rollExpression, hasAdvantage)]
		[rollExpression = dnd5e_RollExpression_setDisadvantage (rollExpression, hasDisadvantage)]
	};{""}]
	[updatedRollExpressions = json.append (updatedRollExpressions, rollExpression)]
}]
[h: rolledExpression = dnd5e_DiceRoller_roll (updatedRollExpressions)]
[r: dnd5e_RollExpression_getFormattedOutput(rolledExpression)]