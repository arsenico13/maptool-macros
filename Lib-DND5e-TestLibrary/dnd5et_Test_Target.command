[h: testTokenName = "targetTest"]
[h: testToken = dnd5et_Util_createTestToken (testTokenName)]
[h: setProperty ("HP", 100, testToken)]
[h: setProperty ("MaxHP", 100, testToken)]
[h: setAllStates (0, testToken)]
[h: setProperty ("Strength", 12, testToken)]
[h: setProperty ("Dexterity", 14, testToken)]
[h: setProperty ("Proficiency", 3, testToken)]
[h: re = dnd5e_RollExpression_WeaponAttack ("test weapon", 1)]
[h: re = dnd5e_RollExpression_setStaticRoll (re, 10)]
[h: rolls = json.append ("", re, dnd5e_RollExpression_addType (re, dnd5e_Type_Targeted()))]
[h, token (testTokenName): rolled = dnd5e_DiceRoller_roll (rolls)]
[h: untargeted = json.get (rolled, 0)]
[h: targeted = json.get (rolled, 1)]
[h: rolls = json.get (untargeted, "rolls")]
[h: testRolls = json.append ("", 10)]
[h: reportResults = dnd5et_Util_assertEqual (rolls, testRolls, "Untargeted Test Roll")]
[h: rolls = json.get (targeted, "rolls")]
[h, if (!json.isEmpty (rolls)): reportResults = json.set (reportResults, "Targeted Test Roll", "Test Failed = unexpected rolls found: " + rolls); reportResults = json.set (reportResults, "Targeted Test Roll", "Test passed")]
[h: removeToken (testToken)]
[h: macro.return = reportResults]