[h: dnd5et_Constants (getMacroName())]
[h: TOTAL_ROLLS = 20]
[h: re = dnd5e_RollExpression_Healing ("Test Heal")]
[h: maxHeal = 8]
[h: minHeal = 1]
[h: re = dnd5e_RollExpression_setTotalRolls (re, TOTAL_ROLLS)]
[h: log.debug (CATEGORY + "## re = " + re)]
[h: rolled = json.get (dnd5e_DiceRoller_roll (re), 0)]
[h: log.debug (CATEGORY + "## rolled = " + rolled)]
[h: allRolls = dnd5e_RollExpression_getRolls (rolled)]
[h: reportResults = dnd5et_Util_assertEqual (json.length (allRolls), TOTAL_ROLLS, "All Rolls Total")]
[h: baseRoll = json.get (allRolls, 0)]
[h: absoluteDeltaTotal = 0]
[h, foreach (testRoll, allRolls), code: {
	[absDelta = math.abs (testRoll - baseRoll)]
	[log.debug (CATEGORY + "## delta: " + absDelta + "; " + json.append ("", testRoll, baseRoll))]
	[absoluteDeltaTotal = absoluteDeltaTotal + absDelta]
}]
[h: results = json.set ("", "Total Absolute Deltas", "Test passed")]
[h, if (absoluteDeltaTotal == 0): 
	results = json.set (results, "Total Absolute Deltas", "FAILED - Deltas were all 0")]
[h: reportResults = json.merge (reportResults, results)]
[h: log.info (CATEGORY + "## " + reportResults)]
[h: macro.return = reportResults]