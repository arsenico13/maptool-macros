<net.rptools.maptool.model.MacroButtonProperties>
  <macroUUID>987aafe3-419f-452a-83bb-5ec29f6e1419</macroUUID>
  <saveLocation>GlobalPanel</saveLocation>
  <index>18</index>
  <colorKey>green</colorKey>
  <hotKey>None</hotKey>
  <command>&lt;!-- Constants --&gt;
[h: ATTACK_JSON = &quot;attackJSON&quot;]
[h: NAME = &quot;name&quot;]
[h: ATK_BONUS = &quot;atkBonus&quot;]
[h: DMG_BONUS = &quot;dmgBonus&quot;]
[h: DMG_DIE = &quot;dmgDie&quot;]
[h: DMG_DICE = &quot;dmgDice&quot;]
[h: CRIT_BONUS_DICE = &quot;critBonusDice&quot;]
[h: DMG_TYPE = &quot;dmgType&quot;]
[h: DMG_BONUS_EXPR = &quot;dmgBonusExpr&quot;]
[h: NEW_ATTACK = &quot;New Attack&quot;]

&lt;!-- Read attack JSON and prompt for selection --&gt;
[h, if (!isPropertyEmpty (ATTACK_JSON)), code: {
	&lt;!-- Property is populated. Fetch JSON data --&gt;
    [h: attackJson = getProperty(ATTACK_JSON)]
}; {
	&lt;!-- Property is empty, use blank object --&gt;
	[h: attackJson = &quot;&quot;]
}]

[h: arrLen = json.length(attackJson)]
[h, if (arrLen &lt; 1), code: {
	[h: selectedAttack = NEW_ATTACK]
}; {
    [h: attackList = NEW_ATTACK]  
    [h, foreach (attack, attackJson): attackList = json.append(attackList, json.get(attack, NAME))]
    [h: abort( input( &quot;selectedAttack | &quot; + json.toList(attackList) + &quot; | Select Attack | list | value=string&quot;))]
}]

&lt;!-- Attack selected! Fetch the JSON for the selected attack. If &quot;new&quot; was selected, nothing will be found --&gt;
[h: cfgAttack = json.fromStrProp(NAME + &quot;=&quot; + NEW_ATTACK)]
[r, foreach (attack, attackJson), code: {
	[h: attackName = json.get(attack, NAME)]
	[h, if (attackName == selectedAttack), code: {
		[cfgAttack = attack]
	};{ 0 }]
}]

&lt;!-- transfer json properties to input vars --&gt;
[h: inputAtkBonus = json.get(cfgAttack, ATK_BONUS)]
[h: inputDmgBonus = json.get(cfgAttack, DMG_BONUS)]
[h: inputDmgDie = json.get(cfgAttack, DMG_DIE)]
[h: inputDmgDice = json.get(cfgAttack, DMG_DICE)]
[h: inputName = json.get(cfgAttack, NAME)]
[h: inputCritBonus = json.get(cfgAttack, CRIT_BONUS_DICE)]
[h: inputDmgType = json.get(cfgAttack, DMG_TYPE)]
[h: inputDmgBonusExpr = json.get(cfgAttack, DMG_BONUS_EXPR)]

&lt;!-- Prompt the input --&gt;
[h: abort( input( &quot;inputName | &quot; + inputName + &quot; | Attack Name | text&quot;,
    &quot;inputAtkBonus | &quot; + inputAtkBonus + &quot; | Attack Bonus | text&quot;,
    &quot;inputDmgBonus | &quot; + inputDmgBonus + &quot; | Damage Bonus | text&quot;,
    &quot;inputDmgDie | &quot; + inputDmgDie + &quot; | Damage Die | text&quot;,
    &quot;inputDmgDice | &quot; + inputDmgDice + &quot; | Number of Damage Dice | text&quot;,
    &quot;inputDmgType | &quot; + inputDmgType + &quot; | Damage Type | text&quot;,
    &quot;inputCritBonus | &quot; + inputCritBonus + &quot; | Extra Critical Dice | text&quot;,
    &quot;inputDmgBonusExpr | &quot; + inputDmgBonusExpr + &quot; | Bonus Damage Expression | text&quot;,
    &quot;inputDeleteAttack | | Delete Attack | check&quot;))]

&lt;!-- Convert the input into a new JSON object --&gt;
[h: cfgAttack = json.set(cfgAttack, 
    NAME, inputName,
    ATK_BONUS, inputAtkBonus,
    DMG_BONUS, inputDmgBonus,
    DMG_DIE, inputDmgDie,
    DMG_DICE, inputDmgDice,
    CRIT_BONUS_DICE, inputCritBonus,
    DMG_TYPE, inputDmgType,
    DMG_BONUS_EXPR, inputDmgBonusExpr)]

[h, if (NEW_ATTACK == selectedAttack), code: {
    &lt;!-- If you added a new attack, just tack it into attackJson --&gt;
    [h: newAttackJson = json.append(attackJson, cfgAttack)]
}; {
    &lt;!-- But if you modifed and existing attack, iterate through the attackJson and replated it --&gt;
    [h: newAttackJson = &quot;&quot;]
    [h, foreach (attack, attackJson), code: {
        [h: attackName = json.get(attack, NAME)]
        [h: attack = if (attackName == selectedAttack, cfgAttack, attack)]
        [h: newAttackJson = if (inputDeleteAttack == 1 &amp;&amp; selectedAttack == json.get(attack, NAME), newAttackJson, json.append(newAttackJson, attack))]
    }]
}]
[h: setProperty(ATTACK_JSON, newAttackJson)]
[r, macro( &quot;Print AttackJSON@global&quot;): &quot;&quot;]
</command>
  <label>Attack Config</label>
  <group>Attack</group>
  <sortby>2</sortby>
  <autoExecute>true</autoExecute>
  <includeLabel>false</includeLabel>
  <applyToTokens>true</applyToTokens>
  <fontColorKey>black</fontColorKey>
  <fontSize>1.00em</fontSize>
  <minWidth></minWidth>
  <maxWidth></maxWidth>
  <allowPlayerEdits>true</allowPlayerEdits>
  <toolTip>Used to configure attacks. Should be executed at least once before Make Attack.
While this can only configure one attack per execution, bulk configuration is
made possible via Set AttackJSON.</toolTip>
  <displayHotKey>true</displayHotKey>
  <commonMacro>false</commonMacro>
  <compareGroup>true</compareGroup>
  <compareSortPrefix>true</compareSortPrefix>
  <compareCommand>true</compareCommand>
  <compareIncludeLabel>true</compareIncludeLabel>
  <compareAutoExecute>true</compareAutoExecute>
  <compareApplyToSelectedTokens>true</compareApplyToSelectedTokens>
</net.rptools.maptool.model.MacroButtonProperties>
