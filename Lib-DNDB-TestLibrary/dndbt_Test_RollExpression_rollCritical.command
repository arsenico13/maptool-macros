[h: attackExpression = dnd5e_RollExpression_Attack ("Test Attack")]
[h: attackExpression = dnd5e_RollExpression_setStaticRoll (attackExpression, 20)]
[h: regularDamage = dnd5e_RollExpression_Damage ("", "1d6")]
[h: saveDamage = dnd5e_RollExpression_SaveDamage ("", "1d6")]
[h: rollExpressions = json.append ("", attackExpression, regularDamage, saveDamage)]
[h: rolledExpressions = dnd5e_DiceRoller_roll (rollExpressions)]
[h: results = "[]"]
[h: rolledAttack = dnd5e_RollExpression_findExpressionByType (rolledExpressions, "Attack")]
[h: roll = dnd5e_RollExpression_getRoll (rolledAttack)]
[h, if (roll != 20): results = json.append (results, "Attack roll was not a critical success (20)")]
[h: damagedExpression = dnd5e_RollExpression_findExpressionByType (rolledExpressions, "Damage")]
[h: childExpressions = dnd5e_RollExpression_getExpressions (damagedExpression)]
[h, if (json.length (childExpressions) != 1): results = json.append (results, "One child expression not found for critable damage; childExpressions: " + childExpressions); ""]
[h: saveDamaged = dnd5e_RollExpression_findExpressionByType (rolledExpressions, "Save Damage")]
[h: childExpressions = dnd5e_RollExpression_getExpressions (saveDamaged)]
[h, if (json.length (childExpressions) != 0): results = json.append (results, "Child expressions were found on non-crtiable damage; childExpressions: " + childExpressions); ""]
[h, if (json.length (results) == 0): results = json.append (results, "All tests passed")]
[h: resultObj = json.set ("", "dndbt_Test_RollExpression_rollCritical", results)]
[h: log.info (resultObj)]
[h: macro.return = resultObj]