#!/usr/bin/env python3
"""This takes a project file (xml) and assembles all the things in it.

input:
  file - an xml file specifically of our "project" type

output:
    <thing1>[...] -  things as described in the project file (tokens,
    properties, macros, or macrosets)
"""

import os
import argparse
import subprocess
from lxml import etree
import logging as log
from asset import MTAsset

AP = argparse.ArgumentParser()

AP.add_argument(
        'file',
        help = 'an xml description of your project''s assets')

AP.add_argument(
        '--output',
        default = 'output',
        help='Directory to put created assets')

AP.add_argument(
        '--verbose',
        action = 'store_true',
        help='Increase verbosity')

opts = AP.parse_args()

if opts.verbose:
    log.basicConfig(format="%(levelname)s: %(message)s", level=log.DEBUG)
    log.info("Verbose output.")
else:
    log.basicConfig(format="%(levelname)s: %(message)s")

xml = etree.parse(opts.file)

os.environ['PATH'] = os.environ['PATH'] + ':./docker'

for elem in xml.getroot():
    if elem.tag == 'token' or elem.tag == 'properties':
        asset = MTAsset(elem.attrib['name'], path=opts.output)
        asset.assemble()
    elif elem.tag == 'macro':
        subprocess.run(['macro-assemble', elem.attrib['name']])
    elif elem.tag == 'macroset':
        cl = ['macro-assemble', '--set', elem.attrib['name']]
        for macro in elem:
            if macro.tag == 'macro':
                cl.append(macro.attrib['name'])
        subprocess.run(cl)
    else:
        log.error('Found unknown tag {} in project file, skipping'.format(elem.tag))
