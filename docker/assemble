#!/usr/bin/env python3
"""Maptool Object Assembler

This provides the UI for running a MTAsset transformation.

See assemble --help for usage
"""

import os
import sys
sys.path.insert(0, 'docker')
from argparse import ArgumentParser
from MTAssetLibrary import GetAsset
import logging as log
import configparser


def ConfigArgs():
    """ConfigArgs

    Returns: argumentparser namespace with config and commandline arguments
    """

    c = configparser.ConfigParser()
    c.read(os.getenv('MTASSET_CONFIG') or 'config.ini')
    if 'assemble' not in c:
        c['assemble'] = {}
    if 'directory' not in c['assemble']:
        c['assemble']['directory'] = '.'

    AP = ArgumentParser(description = "MapTool Asset Assembler")

    AP.add_argument(
            'input',
            nargs='+',
            help='Source for creating the asset')

    AP.add_argument(
            '--list', '--name',
            help='Give a name to a list of macros.  Usually only useful '
                 'if you provide more than one input, if the input is a project the project name will be used instead')

    AP.add_argument(
            '--output',
            default=c['assemble']['directory'],
            help='Output directory')

    AP.add_argument(
            '--verbose',
            action='store_true',
            help='Turn on verbose output')

    AP.add_argument(
            '--info',
            action='store_true',
            help='Turn on informative output')

    return AP.parse_args()

def SetupLogging(av):
    """SetupLogging

    av = a configuration/argument namespace

    returns None
    """
    logformat="%(levelname)s: %(message)s"
    if av.verbose:
        log.basicConfig(format=logformat, level=log.DEBUG)
        log.info("Verbose output.")
    elif av.info:
        log.basicConfig(format=logformat, level=log.INFO)
    else:
        log.basicConfig(format=logformat)
    log.debug('input = %s' % ','.join(av.input))
    log.debug('name = %s' % av.list)
    log.debug('path = %s' % av.output)

if __name__ == '__main__':

    av = ConfigArgs()
    SetupLogging(av)

    asset = GetAsset(*av.input, name=av.list, path=av.output)
    asset.assemble()
