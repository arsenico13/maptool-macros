#!/usr/bin/env python3
"""Maptool Object Extractor

This provides the UI for running a MTAsset transformation
from an asset file (exported/saved from MapTool) into a
filesystem format (with macros extracted)

See extract --help for usage
"""

import sys
sys.path.insert(0, 'docker')
from argparse import ArgumentParser
from newasset import GetAsset
import logging as log
import configparser


def ConfigArgs():
    """ConfigArgs

    Returns: argumentparser namespace with config and commandline arguments
    """

    c = configparser.ConfigParser()
    c.read('config.ini')
    if 'default' not in c:
        c['extract'] = {}
    if 'extractdirectory' not in c['default']:
        c['extract']['directory'] = '.'

    AP = ArgumentParser(description = "MapTool Asset Extractor")

    AP.add_argument(
            'input',
            nargs='+',
            help='Source asset for extracting')

    AP.add_argument(
            '--output',
            default=c['extract']['directory'],
            help='Output directory')

    AP.add_argument(
            '--name',
            default=None,
            help='Give alternate name for the directory (cmpgn, '
            'rptok, mtprops) or macro (mtmacro) being extracted')

    AP.add_argument(
            '--verbose',
            action='store_true',
            help='Turn on verbose output')

    AP.add_argument(
            '--info',
            action='store_true',
            help='Turn on informative output')

    return AP.parse_args()

def SetupLogging(av):
    """SetupLogging

    av = a configuration/argument namespace

    returns None
    """
    logformat="%(levelname)s: %(message)s"
    if av.verbose:
        log.basicConfig(format=logformat, level=log.DEBUG)
        log.info("Verbose output.")
    elif av.info:
        log.basicConfig(format=logformat, level=log.INFO)
    else:
        log.basicConfig(format=logformat)
    log.debug('input = %s' % ','.join(av.input))
    log.debug('name = %s' % av.name)
    log.debug('path = %s' % av.output)

if __name__ == '__main__':

    av = ConfigArgs()
    SetupLogging(av)

    asset = GetAsset(*av.input, name=av.name, path=av.output)
    asset.extract()
