[h: inputObj = arg (0)]
[h: log.debug (getMacroName() + ": inputObj = " + inputObj)]
[h: actionName = json.get (inputObj, "actionName")]
[h: advDisadv = json.get (inputObj, "advDisadv")]
[h: monsterActions = getProperty ("_o5e_MonsterActions")]
[h, if (encode (monsterActions) == ""), code: {
	[broadcast ("No Monser Actions object", "self")]
	[return (0)]
}; {""}]
[h: actionObj = json.get (monsterActions, actionName)]
[h, if (encode (actionObj) == ""), code: {
	[broadcast ("Action " + actionName + " not found")]
}; {""}]
[h: actionObjType = json.type (actionObj)]
[h: log.debug ("actionObjType = " + actionObjType)]
[h: output = "FAKE ROLL!"]
[h, if (actionObjType == "UNKNOWN"), code: {
	[h: rollExpression = dnd5e_RollExpression_SaveEffect (actionName)]
	[h: rollExpression = dnd5e_RollExpression_setSaveEffect (rollExpression, actionObj)]
	[h: rollExpression = dnd5e_RollExpression_setSaveAbility (rollExpression, "Dunno")]
	[h: rollExpression = dnd5e_RollExpression_setSaveDC (rollExpression, 0)]
	[h: rolled = json.get (dnd5e_DiceRoller_roll (rollExpression), 0)]
	[h: output = dnd5e_RollExpression_getOutput (rolled)]
	[h: return (0, output)]
}; {""}]

[h: attackExpressions = o5e_RollExpression_forAttackAction (actionName, actionObj, advDisadv)]
[h: rolledExpressions = dnd5e_DiceRoller_roll (attackExpressions)]
[h: output = dnd5e_RollExpression_getCombinedOutput (rolledExpressions)]
[r: output]