[h: forResourceField = arg (0)]
[h: dnd5e_CharSheet_Constants (getMacroName())]
[h: resourceObj = getProperty (PROP_RESOURCES)]
[h: log.debug (CATEGORY + "## resourceObj = " + resourceObj)]
[h, if (json.type (resourceObj) != "OBJECT"): resourceObj = "{}"]
[h: resetArry = json.append ("", "Short Rest", "Long Rest", "Special")]
[h: tabStr = "%{resourceField} | %{resourceName} | | TAB"]
[h: nameStr = "name | %{resourceName} | Resource Name | TEXT | width=8"]
[h: currentStr = "current | %{current} | Current Uses | TEXT | width=5"]
[h: limitStr = "limit | %{limit} | Total Uses | TEXT | width=5"]
[h: resetStr = "reset | " + resetArry + 
	" | Reset Criteria | LIST | delimiter=json select=%{resetSelect} value=string"]
[h: deleteStr = "delete | 0 | Delete Resource | CHECK"]

[h: inputStr = ""]
[h: resourceFields = json.fields (resourceObj, "json")]
[h: newResourceField = "NEW_RESOURCE"]
[h: resourceFields = json.append (resourceFields, newResourceField)]
[h, if (forResourceField != ""): resourceFields = json.append ("", forResourceField)]
[h: tabFields = "[]"]
[h: inputStr = ""]
[h, foreach (resourceField, resourceFields), code: {
	[resourceStrProp = json.get (resourceObj, resourceField)]
	[resourceName = getStrProp (resourceStrProp, "name", resourceField, "##")]
	[resourceField = dnd5e_CharSheet_Util_getTabSafeVar (resourceName)]
	[tabFields = json.append (tabFields, resourceField)]
	[current = getStrProp (resourceStrProp, "current", 0, "##")]
	[limit = getStrProp (resourceStrProp, "limit", 1, "##")]
	[resetVal = getStrProp (resourceStrProp, "reset", json.get (resetArry, 0), "##")]
	[resetSelect = json.indexOf (resetArry, resetVal)]
	[log.debug (CATEGORY + "## resourceStrProp = " + resourceStrProp + "; resourceName = " + resourceName +
		"; current = " + current + "; limit = " + limit + "; resetVal = " + resetVal)]
	[inputStr = listAppend (inputStr, strformat (tabStr), "##")]
	[inputStr = listAppend (inputStr, strformat (nameStr), "##")]
	[inputStr = listAppend (inputStr, strformat (currentStr), "##")]
	[inputStr = listAppend (inputStr, strformat (limitStr), "##")]
	[inputStr = listAppend (inputStr, strformat (resetStr), "##")]
	[inputStr = listAppend (inputStr, deleteStr, "##")]
}]
[h: retObj = json.set ("", "inputString", inputStr, "tabFields", tabFields)]
[h: log.trace (CATEGORY + "## retObj = " + retObj)]
[h: macro.return = retObj]